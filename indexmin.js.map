{
  "version": 3,
  "sources": ["../ogl/src/math/functions/Vec3Func.js", "../ogl/src/math/Vec3.js", "../ogl/src/core/Geometry.js", "../ogl/src/core/Program.js", "../ogl/src/core/Renderer.js", "../ogl/src/math/functions/Vec4Func.js", "../ogl/src/math/functions/QuatFunc.js", "../ogl/src/math/Quat.js", "../ogl/src/math/functions/Mat4Func.js", "../ogl/src/math/Mat4.js", "../ogl/src/math/functions/EulerFunc.js", "../ogl/src/math/Euler.js", "../ogl/src/core/Transform.js", "../ogl/src/core/Camera.js", "../ogl/src/math/functions/Mat3Func.js", "../ogl/src/math/Mat3.js", "../ogl/src/core/Mesh.js", "../ogl/src/core/Texture.js", "../ogl/src/math/functions/Vec2Func.js", "../ogl/src/math/Vec2.js", "../ogl/src/math/Vec4.js", "../ogl/src/extras/Plane.js", "../ogl/src/extras/Box.js", "../ogl/src/extras/Orbit.js", "../ogl/src/extras/Raycast.js", "../ogl/src/extras/NormalProgram.js", "../ogl/src/extras/GLTFAnimation.js", "../ogl/src/extras/GLTFSkin.js", "../ogl/src/extras/InstancedMesh.js", "../ogl/src/extras/GLTFLoader.js", "../ogl/src/extras/helpers/GridHelper.js", "skybox.js", "abstract.js", "ui.js", "editmode.js", "terrain.js", "rayhelp.js", "index.js"],
  "sourcesContent": ["const EPSILON = 0.000001;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return x * x + y * y + z * z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return x * x + y * y + z * z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    out[2] = 1.0 / a[2];\n    return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let len = x * x + y * y + z * z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n    let ax = a[0],\n        ay = a[1],\n        az = a[2];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n}\n\n/**\n * Same as above but doesn't apply translation.\n * Useful for rays.\n */\nexport function scaleRotateMat4(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z) / w;\n    return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let qx = q[0],\n        qy = q[1],\n        qz = q[2],\n        qw = q[3];\n\n    let uvx = qy * z - qz * y;\n    let uvy = qz * x - qx * z;\n    let uvz = qx * y - qy * x;\n\n    let uuvx = qy * uvz - qz * uvy;\n    let uuvy = qz * uvx - qx * uvz;\n    let uuvz = qx * uvy - qy * uvx;\n\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport const angle = (function () {\n    const tempA = [0, 0, 0];\n    const tempB = [0, 0, 0];\n\n    return function (a, b) {\n        copy(tempA, a);\n        copy(tempB, b);\n\n        normalize(tempA, tempA);\n        normalize(tempB, tempB);\n\n        let cosine = dot(tempA, tempB);\n\n        if (cosine > 1.0) {\n            return 0;\n        } else if (cosine < -1.0) {\n            return Math.PI;\n        } else {\n            return Math.acos(cosine);\n        }\n    };\n})();\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n", "import * as Vec3Func from './functions/Vec3Func.js';\n\nexport class Vec3 extends Array {\n    constructor(x = 0, y = x, z = x) {\n        super(x, y, z);\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    set x(v) {\n        this[0] = v;\n    }\n\n    set y(v) {\n        this[1] = v;\n    }\n\n    set z(v) {\n        this[2] = v;\n    }\n\n    set(x, y = x, z = x) {\n        if (x.length) return this.copy(x);\n        Vec3Func.set(this, x, y, z);\n        return this;\n    }\n\n    copy(v) {\n        Vec3Func.copy(this, v);\n        return this;\n    }\n\n    add(va, vb) {\n        if (vb) Vec3Func.add(this, va, vb);\n        else Vec3Func.add(this, this, va);\n        return this;\n    }\n\n    sub(va, vb) {\n        if (vb) Vec3Func.subtract(this, va, vb);\n        else Vec3Func.subtract(this, this, va);\n        return this;\n    }\n\n    multiply(v) {\n        if (v.length) Vec3Func.multiply(this, this, v);\n        else Vec3Func.scale(this, this, v);\n        return this;\n    }\n\n    divide(v) {\n        if (v.length) Vec3Func.divide(this, this, v);\n        else Vec3Func.scale(this, this, 1 / v);\n        return this;\n    }\n\n    inverse(v = this) {\n        Vec3Func.inverse(this, v);\n        return this;\n    }\n\n    // Can't use 'length' as Array.prototype uses it\n    len() {\n        return Vec3Func.length(this);\n    }\n\n    distance(v) {\n        if (v) return Vec3Func.distance(this, v);\n        else return Vec3Func.length(this);\n    }\n\n    squaredLen() {\n        return Vec3Func.squaredLength(this);\n    }\n\n    squaredDistance(v) {\n        if (v) return Vec3Func.squaredDistance(this, v);\n        else return Vec3Func.squaredLength(this);\n    }\n\n    negate(v = this) {\n        Vec3Func.negate(this, v);\n        return this;\n    }\n\n    cross(va, vb) {\n        if (vb) Vec3Func.cross(this, va, vb);\n        else Vec3Func.cross(this, this, va);\n        return this;\n    }\n\n    scale(v) {\n        Vec3Func.scale(this, this, v);\n        return this;\n    }\n\n    normalize() {\n        Vec3Func.normalize(this, this);\n        return this;\n    }\n\n    dot(v) {\n        return Vec3Func.dot(this, v);\n    }\n\n    equals(v) {\n        return Vec3Func.exactEquals(this, v);\n    }\n\n    applyMatrix3(mat3) {\n        Vec3Func.transformMat3(this, this, mat3);\n        return this;\n    }\n\n    applyMatrix4(mat4) {\n        Vec3Func.transformMat4(this, this, mat4);\n        return this;\n    }\n\n    scaleRotateMatrix4(mat4) {\n        Vec3Func.scaleRotateMat4(this, this, mat4);\n        return this;\n    }\n\n    applyQuaternion(q) {\n        Vec3Func.transformQuat(this, this, q);\n        return this;\n    }\n\n    angle(v) {\n        return Vec3Func.angle(this, v);\n    }\n\n    lerp(v, t) {\n        Vec3Func.lerp(this, this, v, t);\n        return this;\n    }\n\n    clone() {\n        return new Vec3(this[0], this[1], this[2]);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        return a;\n    }\n\n    transformDirection(mat4) {\n        const x = this[0];\n        const y = this[1];\n        const z = this[2];\n\n        this[0] = mat4[0] * x + mat4[4] * y + mat4[8] * z;\n        this[1] = mat4[1] * x + mat4[5] * y + mat4[9] * z;\n        this[2] = mat4[2] * x + mat4[6] * y + mat4[10] * z;\n\n        return this.normalize();\n    }\n}\n", "// attribute params\n// {\n//     data - typed array eg UInt16Array for indices, Float32Array\n//     size - int default 1\n//     instanced - default null. Pass divisor amount\n//     type - gl enum default gl.UNSIGNED_SHORT for 'index', gl.FLOAT for others\n//     normalized - boolean default false\n\n//     buffer - gl buffer, if buffer exists, don't need to provide data - although needs position data for bounds calculation\n//     stride - default 0 - for when passing in buffer\n//     offset - default 0 - for when passing in buffer\n//     count - default null - for when passing in buffer\n//     min - array - for when passing in buffer\n//     max - array - for when passing in buffer\n// }\n\n// TODO: fit in transform feedback\n\nimport { Vec3 } from '../math/Vec3.js';\n\nconst tempVec3 = new Vec3();\n\nlet ID = 1;\nlet ATTR_ID = 1;\n\n// To stop inifinite warnings\nlet isBoundsWarned = false;\n\nexport class Geometry {\n    constructor(gl, attributes = {}) {\n        if (!gl.canvas) console.error('gl not passed as first argument to Geometry');\n        this.gl = gl;\n        this.attributes = attributes;\n        this.id = ID++;\n\n        // Store one VAO per program attribute locations order\n        this.VAOs = {};\n\n        this.drawRange = { start: 0, count: 0 };\n        this.instancedCount = 0;\n\n        // Unbind current VAO so that new buffers don't get added to active mesh\n        this.gl.renderer.bindVertexArray(null);\n        this.gl.renderer.currentGeometry = null;\n\n        // Alias for state store to avoid redundant calls for global state\n        this.glState = this.gl.renderer.state;\n\n        // create the buffers\n        for (let key in attributes) {\n            this.addAttribute(key, attributes[key]);\n        }\n    }\n\n    addAttribute(key, attr) {\n        this.attributes[key] = attr;\n\n        // Set options\n        attr.id = ATTR_ID++; // TODO: currently unused, remove?\n        attr.size = attr.size || 1;\n        attr.type =\n            attr.type ||\n            (attr.data.constructor === Float32Array\n                ? this.gl.FLOAT\n                : attr.data.constructor === Uint16Array\n                ? this.gl.UNSIGNED_SHORT\n                : this.gl.UNSIGNED_INT); // Uint32Array\n        attr.target = key === 'index' ? this.gl.ELEMENT_ARRAY_BUFFER : this.gl.ARRAY_BUFFER;\n        attr.normalized = attr.normalized || false;\n        attr.stride = attr.stride || 0;\n        attr.offset = attr.offset || 0;\n        attr.count = attr.count || (attr.stride ? attr.data.byteLength / attr.stride : attr.data.length / attr.size);\n        attr.divisor = attr.instanced || 0;\n        attr.needsUpdate = false;\n        attr.usage = attr.usage || this.gl.STATIC_DRAW;\n\n        if (!attr.buffer) {\n            // Push data to buffer\n            this.updateAttribute(attr);\n        }\n\n        // Update geometry counts. If indexed, ignore regular attributes\n        if (attr.divisor) {\n            this.isInstanced = true;\n            if (this.instancedCount && this.instancedCount !== attr.count * attr.divisor) {\n                console.warn('geometry has multiple instanced buffers of different length');\n                return (this.instancedCount = Math.min(this.instancedCount, attr.count * attr.divisor));\n            }\n            this.instancedCount = attr.count * attr.divisor;\n        } else if (key === 'index') {\n            this.drawRange.count = attr.count;\n        } else if (!this.attributes.index) {\n            this.drawRange.count = Math.max(this.drawRange.count, attr.count);\n        }\n    }\n\n    updateAttribute(attr) {\n        const isNewBuffer = !attr.buffer;\n        if (isNewBuffer) attr.buffer = this.gl.createBuffer();\n        if (this.glState.boundBuffer !== attr.buffer) {\n            this.gl.bindBuffer(attr.target, attr.buffer);\n            this.glState.boundBuffer = attr.buffer;\n        }\n        if (isNewBuffer) {\n            this.gl.bufferData(attr.target, attr.data, attr.usage);\n        } else {\n            this.gl.bufferSubData(attr.target, 0, attr.data);\n        }\n        attr.needsUpdate = false;\n    }\n\n    setIndex(value) {\n        this.addAttribute('index', value);\n    }\n\n    setDrawRange(start, count) {\n        this.drawRange.start = start;\n        this.drawRange.count = count;\n    }\n\n    setInstancedCount(value) {\n        this.instancedCount = value;\n    }\n\n    createVAO(program) {\n        this.VAOs[program.attributeOrder] = this.gl.renderer.createVertexArray();\n        this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n        this.bindAttributes(program);\n    }\n\n    bindAttributes(program) {\n        // Link all attributes to program using gl.vertexAttribPointer\n        program.attributeLocations.forEach((location, { name, type }) => {\n            // If geometry missing a required shader attribute\n            if (!this.attributes[name]) {\n                console.warn(`active attribute ${name} not being supplied`);\n                return;\n            }\n\n            const attr = this.attributes[name];\n\n            this.gl.bindBuffer(attr.target, attr.buffer);\n            this.glState.boundBuffer = attr.buffer;\n\n            // For matrix attributes, buffer needs to be defined per column\n            let numLoc = 1;\n            if (type === 35674) numLoc = 2; // mat2\n            if (type === 35675) numLoc = 3; // mat3\n            if (type === 35676) numLoc = 4; // mat4\n\n            const size = attr.size / numLoc;\n            const stride = numLoc === 1 ? 0 : numLoc * numLoc * 4;\n            const offset = numLoc === 1 ? 0 : numLoc * 4;\n\n            for (let i = 0; i < numLoc; i++) {\n                this.gl.vertexAttribPointer(location + i, size, attr.type, attr.normalized, attr.stride + stride, attr.offset + i * offset);\n                this.gl.enableVertexAttribArray(location + i);\n\n                // For instanced attributes, divisor needs to be set.\n                // For firefox, need to set back to 0 if non-instanced drawn after instanced. Else won't render\n                this.gl.renderer.vertexAttribDivisor(location + i, attr.divisor);\n            }\n        });\n\n        // Bind indices if geometry indexed\n        if (this.attributes.index) this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.attributes.index.buffer);\n    }\n\n    draw({ program, mode = this.gl.TRIANGLES }) {\n        if (this.gl.renderer.currentGeometry !== `${this.id}_${program.attributeOrder}`) {\n            if (!this.VAOs[program.attributeOrder]) this.createVAO(program);\n            this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n            this.gl.renderer.currentGeometry = `${this.id}_${program.attributeOrder}`;\n        }\n\n        // Check if any attributes need updating\n        program.attributeLocations.forEach((location, { name }) => {\n            const attr = this.attributes[name];\n            if (attr.needsUpdate) this.updateAttribute(attr);\n        });\n\n        // For drawElements, offset needs to be multiple of type size\n        let indexBytesPerElement = 2;\n        if (this.attributes.index?.type === this.gl.UNSIGNED_INT) indexBytesPerElement = 4;\n\n        if (this.isInstanced) {\n            if (this.attributes.index) {\n                this.gl.renderer.drawElementsInstanced(\n                    mode,\n                    this.drawRange.count,\n                    this.attributes.index.type,\n                    this.attributes.index.offset + this.drawRange.start * indexBytesPerElement,\n                    this.instancedCount\n                );\n            } else {\n                this.gl.renderer.drawArraysInstanced(mode, this.drawRange.start, this.drawRange.count, this.instancedCount);\n            }\n        } else {\n            if (this.attributes.index) {\n                this.gl.drawElements(\n                    mode,\n                    this.drawRange.count,\n                    this.attributes.index.type,\n                    this.attributes.index.offset + this.drawRange.start * indexBytesPerElement\n                );\n            } else {\n                this.gl.drawArrays(mode, this.drawRange.start, this.drawRange.count);\n            }\n        }\n    }\n\n    getPosition() {\n        // Use position buffer, or min/max if available\n        const attr = this.attributes.position;\n        // if (attr.min) return [...attr.min, ...attr.max];\n        if (attr.data) return attr;\n        if (isBoundsWarned) return;\n        console.warn('No position buffer data found to compute bounds');\n        return (isBoundsWarned = true);\n    }\n\n    computeBoundingBox(attr) {\n        if (!attr) attr = this.getPosition();\n        const array = attr.data;\n        // Data loaded shouldn't haave stride, only buffers\n        // const stride = attr.stride ? attr.stride / array.BYTES_PER_ELEMENT : attr.size;\n        const stride = attr.size;\n\n        if (!this.bounds) {\n            this.bounds = {\n                min: new Vec3(),\n                max: new Vec3(),\n                center: new Vec3(),\n                scale: new Vec3(),\n                radius: Infinity,\n            };\n        }\n\n        const min = this.bounds.min;\n        const max = this.bounds.max;\n        const center = this.bounds.center;\n        const scale = this.bounds.scale;\n\n        min.set(+Infinity);\n        max.set(-Infinity);\n\n        // TODO: check size of position (eg triangle with Vec2)\n        for (let i = 0, l = array.length; i < l; i += stride) {\n            const x = array[i];\n            const y = array[i + 1];\n            const z = array[i + 2];\n\n            min.x = Math.min(x, min.x);\n            min.y = Math.min(y, min.y);\n            min.z = Math.min(z, min.z);\n\n            max.x = Math.max(x, max.x);\n            max.y = Math.max(y, max.y);\n            max.z = Math.max(z, max.z);\n        }\n\n        scale.sub(max, min);\n        center.add(min, max).divide(2);\n    }\n\n    computeBoundingSphere(attr) {\n        if (!attr) attr = this.getPosition();\n        const array = attr.data;\n        // Data loaded shouldn't haave stride, only buffers\n        // const stride = attr.stride ? attr.stride / array.BYTES_PER_ELEMENT : attr.size;\n        const stride = attr.size;\n\n        if (!this.bounds) this.computeBoundingBox(attr);\n\n        let maxRadiusSq = 0;\n        for (let i = 0, l = array.length; i < l; i += stride) {\n            tempVec3.fromArray(array, i);\n            maxRadiusSq = Math.max(maxRadiusSq, this.bounds.center.squaredDistance(tempVec3));\n        }\n\n        this.bounds.radius = Math.sqrt(maxRadiusSq);\n    }\n\n    remove() {\n        for (let key in this.VAOs) {\n            this.gl.renderer.deleteVertexArray(this.VAOs[key]);\n            delete this.VAOs[key];\n        }\n        for (let key in this.attributes) {\n            this.gl.deleteBuffer(this.attributes[key].buffer);\n            delete this.attributes[key];\n        }\n    }\n}\n", "// TODO: upload empty texture if null ? maybe not\n// TODO: upload identity matrix if null ?\n// TODO: sampler Cube\n\nlet ID = 1;\n\n// cache of typed arrays used to flatten uniform arrays\nconst arrayCacheF32 = {};\n\nexport class Program {\n    constructor(\n        gl,\n        {\n            vertex,\n            fragment,\n            uniforms = {},\n\n            transparent = false,\n            cullFace = gl.BACK,\n            frontFace = gl.CCW,\n            depthTest = true,\n            depthWrite = true,\n            depthFunc = gl.LESS,\n        } = {}\n    ) {\n        if (!gl.canvas) console.error('gl not passed as first argument to Program');\n        this.gl = gl;\n        this.uniforms = uniforms;\n        this.id = ID++;\n\n        if (!vertex) console.warn('vertex shader not supplied');\n        if (!fragment) console.warn('fragment shader not supplied');\n\n        // Store program state\n        this.transparent = transparent;\n        this.cullFace = cullFace;\n        this.frontFace = frontFace;\n        this.depthTest = depthTest;\n        this.depthWrite = depthWrite;\n        this.depthFunc = depthFunc;\n        this.blendFunc = {};\n        this.blendEquation = {};\n\n        // set default blendFunc if transparent flagged\n        if (this.transparent && !this.blendFunc.src) {\n            if (this.gl.renderer.premultipliedAlpha) this.setBlendFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\n            else this.setBlendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n        }\n\n        // compile vertex shader and log errors\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        gl.shaderSource(vertexShader, vertex);\n        gl.compileShader(vertexShader);\n        if (gl.getShaderInfoLog(vertexShader) !== '') {\n            console.warn(`${gl.getShaderInfoLog(vertexShader)}\\nVertex Shader\\n${addLineNumbers(vertex)}`);\n        }\n\n        // compile fragment shader and log errors\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        gl.shaderSource(fragmentShader, fragment);\n        gl.compileShader(fragmentShader);\n        if (gl.getShaderInfoLog(fragmentShader) !== '') {\n            console.warn(`${gl.getShaderInfoLog(fragmentShader)}\\nFragment Shader\\n${addLineNumbers(fragment)}`);\n        }\n\n        // compile program and log errors\n        this.program = gl.createProgram();\n        gl.attachShader(this.program, vertexShader);\n        gl.attachShader(this.program, fragmentShader);\n        gl.linkProgram(this.program);\n        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\n            return console.warn(gl.getProgramInfoLog(this.program));\n        }\n\n        // Remove shader once linked\n        gl.deleteShader(vertexShader);\n        gl.deleteShader(fragmentShader);\n\n        // Get active uniform locations\n        this.uniformLocations = new Map();\n        let numUniforms = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);\n        for (let uIndex = 0; uIndex < numUniforms; uIndex++) {\n            let uniform = gl.getActiveUniform(this.program, uIndex);\n            this.uniformLocations.set(uniform, gl.getUniformLocation(this.program, uniform.name));\n\n            // split uniforms' names to separate array and struct declarations\n            const split = uniform.name.match(/(\\w+)/g);\n\n            uniform.uniformName = split[0];\n            uniform.nameComponents = split.slice(1);\n        }\n\n        // Get active attribute locations\n        this.attributeLocations = new Map();\n        const locations = [];\n        const numAttribs = gl.getProgramParameter(this.program, gl.ACTIVE_ATTRIBUTES);\n        for (let aIndex = 0; aIndex < numAttribs; aIndex++) {\n            const attribute = gl.getActiveAttrib(this.program, aIndex);\n            const location = gl.getAttribLocation(this.program, attribute.name);\n            // Ignore special built-in inputs. eg gl_VertexID, gl_InstanceID\n            if (location === -1) continue;\n            locations[location] = attribute.name;\n            this.attributeLocations.set(attribute, location);\n        }\n        this.attributeOrder = locations.join('');\n    }\n\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        this.blendFunc.src = src;\n        this.blendFunc.dst = dst;\n        this.blendFunc.srcAlpha = srcAlpha;\n        this.blendFunc.dstAlpha = dstAlpha;\n        if (src) this.transparent = true;\n    }\n\n    setBlendEquation(modeRGB, modeAlpha) {\n        this.blendEquation.modeRGB = modeRGB;\n        this.blendEquation.modeAlpha = modeAlpha;\n    }\n\n    applyState() {\n        if (this.depthTest) this.gl.renderer.enable(this.gl.DEPTH_TEST);\n        else this.gl.renderer.disable(this.gl.DEPTH_TEST);\n\n        if (this.cullFace) this.gl.renderer.enable(this.gl.CULL_FACE);\n        else this.gl.renderer.disable(this.gl.CULL_FACE);\n\n        if (this.blendFunc.src) this.gl.renderer.enable(this.gl.BLEND);\n        else this.gl.renderer.disable(this.gl.BLEND);\n\n        if (this.cullFace) this.gl.renderer.setCullFace(this.cullFace);\n        this.gl.renderer.setFrontFace(this.frontFace);\n        this.gl.renderer.setDepthMask(this.depthWrite);\n        this.gl.renderer.setDepthFunc(this.depthFunc);\n        if (this.blendFunc.src)\n            this.gl.renderer.setBlendFunc(this.blendFunc.src, this.blendFunc.dst, this.blendFunc.srcAlpha, this.blendFunc.dstAlpha);\n        this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB, this.blendEquation.modeAlpha);\n    }\n\n    use({ flipFaces = false } = {}) {\n        let textureUnit = -1;\n        const programActive = this.gl.renderer.state.currentProgram === this.id;\n\n        // Avoid gl call if program already in use\n        if (!programActive) {\n            this.gl.useProgram(this.program);\n            this.gl.renderer.state.currentProgram = this.id;\n        }\n\n        // Set only the active uniforms found in the shader\n        this.uniformLocations.forEach((location, activeUniform) => {\n            let uniform = this.uniforms[activeUniform.uniformName];\n\n            for (const component of activeUniform.nameComponents) {\n                if (!uniform) break;\n\n                if (component in uniform) {\n                    uniform = uniform[component];\n                } else if (Array.isArray(uniform.value)) {\n                    break;\n                } else {\n                    uniform = undefined;\n                    break;\n                }\n            }\n\n            if (!uniform) {\n                return warn(`Active uniform ${activeUniform.name} has not been supplied`);\n            }\n\n            if (uniform && uniform.value === undefined) {\n                return warn(`${activeUniform.name} uniform is missing a value parameter`);\n            }\n\n            if (uniform.value.texture) {\n                textureUnit = textureUnit + 1;\n\n                // Check if texture needs to be updated\n                uniform.value.update(textureUnit);\n                return setUniform(this.gl, activeUniform.type, location, textureUnit);\n            }\n\n            // For texture arrays, set uniform as an array of texture units instead of just one\n            if (uniform.value.length && uniform.value[0].texture) {\n                const textureUnits = [];\n                uniform.value.forEach((value) => {\n                    textureUnit = textureUnit + 1;\n                    value.update(textureUnit);\n                    textureUnits.push(textureUnit);\n                });\n\n                return setUniform(this.gl, activeUniform.type, location, textureUnits);\n            }\n\n            setUniform(this.gl, activeUniform.type, location, uniform.value);\n        });\n\n        this.applyState();\n        if (flipFaces) this.gl.renderer.setFrontFace(this.frontFace === this.gl.CCW ? this.gl.CW : this.gl.CCW);\n    }\n\n    remove() {\n        this.gl.deleteProgram(this.program);\n    }\n}\n\nfunction setUniform(gl, type, location, value) {\n    value = value.length ? flatten(value) : value;\n    const setValue = gl.renderer.state.uniformLocations.get(location);\n\n    // Avoid redundant uniform commands\n    if (value.length) {\n        if (setValue === undefined || setValue.length !== value.length) {\n            // clone array to store as cache\n            gl.renderer.state.uniformLocations.set(location, value.slice(0));\n        } else {\n            if (arraysEqual(setValue, value)) return;\n\n            // Update cached array values\n            setValue.set ? setValue.set(value) : setArray(setValue, value);\n            gl.renderer.state.uniformLocations.set(location, setValue);\n        }\n    } else {\n        if (setValue === value) return;\n        gl.renderer.state.uniformLocations.set(location, value);\n    }\n\n    switch (type) {\n        case 5126:\n            return value.length ? gl.uniform1fv(location, value) : gl.uniform1f(location, value); // FLOAT\n        case 35664:\n            return gl.uniform2fv(location, value); // FLOAT_VEC2\n        case 35665:\n            return gl.uniform3fv(location, value); // FLOAT_VEC3\n        case 35666:\n            return gl.uniform4fv(location, value); // FLOAT_VEC4\n        case 35670: // BOOL\n        case 5124: // INT\n        case 35678: // SAMPLER_2D\n        case 35680:\n            return value.length ? gl.uniform1iv(location, value) : gl.uniform1i(location, value); // SAMPLER_CUBE\n        case 35671: // BOOL_VEC2\n        case 35667:\n            return gl.uniform2iv(location, value); // INT_VEC2\n        case 35672: // BOOL_VEC3\n        case 35668:\n            return gl.uniform3iv(location, value); // INT_VEC3\n        case 35673: // BOOL_VEC4\n        case 35669:\n            return gl.uniform4iv(location, value); // INT_VEC4\n        case 35674:\n            return gl.uniformMatrix2fv(location, false, value); // FLOAT_MAT2\n        case 35675:\n            return gl.uniformMatrix3fv(location, false, value); // FLOAT_MAT3\n        case 35676:\n            return gl.uniformMatrix4fv(location, false, value); // FLOAT_MAT4\n    }\n}\n\nfunction addLineNumbers(string) {\n    let lines = string.split('\\n');\n    for (let i = 0; i < lines.length; i++) {\n        lines[i] = i + 1 + ': ' + lines[i];\n    }\n    return lines.join('\\n');\n}\n\nfunction flatten(a) {\n    const arrayLen = a.length;\n    const valueLen = a[0].length;\n    if (valueLen === undefined) return a;\n    const length = arrayLen * valueLen;\n    let value = arrayCacheF32[length];\n    if (!value) arrayCacheF32[length] = value = new Float32Array(length);\n    for (let i = 0; i < arrayLen; i++) value.set(a[i], i * valueLen);\n    return value;\n}\n\nfunction arraysEqual(a, b) {\n    if (a.length !== b.length) return false;\n    for (let i = 0, l = a.length; i < l; i++) {\n        if (a[i] !== b[i]) return false;\n    }\n    return true;\n}\n\nfunction setArray(a, b) {\n    for (let i = 0, l = a.length; i < l; i++) {\n        a[i] = b[i];\n    }\n}\n\nlet warnCount = 0;\nfunction warn(message) {\n    if (warnCount > 100) return;\n    console.warn(message);\n    warnCount++;\n    if (warnCount > 100) console.warn('More than 100 program warnings - stopping logs.');\n}\n", "import { Vec3 } from '../math/Vec3.js';\n\n// TODO: Handle context loss https://www.khronos.org/webgl/wiki/HandlingContextLost\n\n// Not automatic - devs to use these methods manually\n// gl.colorMask( colorMask, colorMask, colorMask, colorMask );\n// gl.clearColor( r, g, b, a );\n// gl.stencilMask( stencilMask );\n// gl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n// gl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n// gl.clearStencil( stencil );\n\nconst tempVec3 = new Vec3();\nlet ID = 1;\n\nexport class Renderer {\n    constructor({\n        canvas = document.createElement('canvas'),\n        width = 300,\n        height = 150,\n        dpr = 1,\n        alpha = false,\n        depth = true,\n        stencil = false,\n        antialias = false,\n        premultipliedAlpha = false,\n        preserveDrawingBuffer = false,\n        powerPreference = 'default',\n        autoClear = true,\n        webgl = 2,\n    } = {}) {\n        const attributes = { alpha, depth, stencil, antialias, premultipliedAlpha, preserveDrawingBuffer, powerPreference };\n        this.dpr = dpr;\n        this.alpha = alpha;\n        this.color = true;\n        this.depth = depth;\n        this.stencil = stencil;\n        this.premultipliedAlpha = premultipliedAlpha;\n        this.autoClear = autoClear;\n        this.id = ID++;\n\n        // Attempt WebGL2 unless forced to 1, if not supported fallback to WebGL1\n        if (webgl === 2) this.gl = canvas.getContext('webgl2', attributes);\n        this.isWebgl2 = !!this.gl;\n        if (!this.gl) this.gl = canvas.getContext('webgl', attributes);\n        if (!this.gl) console.error('unable to create webgl context');\n\n        // Attach renderer to gl so that all classes have access to internal state functions\n        this.gl.renderer = this;\n\n        // initialise size values\n        this.setSize(width, height);\n\n        // gl state stores to avoid redundant calls on methods used internally\n        this.state = {};\n        this.state.blendFunc = { src: this.gl.ONE, dst: this.gl.ZERO };\n        this.state.blendEquation = { modeRGB: this.gl.FUNC_ADD };\n        this.state.cullFace = null;\n        this.state.frontFace = this.gl.CCW;\n        this.state.depthMask = true;\n        this.state.depthFunc = this.gl.LESS;\n        this.state.premultiplyAlpha = false;\n        this.state.flipY = false;\n        this.state.unpackAlignment = 4;\n        this.state.framebuffer = null;\n        this.state.viewport = { x: 0, y: 0, width: null, height: null };\n        this.state.textureUnits = [];\n        this.state.activeTextureUnit = 0;\n        this.state.boundBuffer = null;\n        this.state.uniformLocations = new Map();\n        this.state.currentProgram = null;\n\n        // store requested extensions\n        this.extensions = {};\n\n        // Initialise extra format types\n        if (this.isWebgl2) {\n            this.getExtension('EXT_color_buffer_float');\n            this.getExtension('OES_texture_float_linear');\n        } else {\n            this.getExtension('OES_texture_float');\n            this.getExtension('OES_texture_float_linear');\n            this.getExtension('OES_texture_half_float');\n            this.getExtension('OES_texture_half_float_linear');\n            this.getExtension('OES_element_index_uint');\n            this.getExtension('OES_standard_derivatives');\n            this.getExtension('EXT_sRGB');\n            this.getExtension('WEBGL_depth_texture');\n            this.getExtension('WEBGL_draw_buffers');\n        }\n        this.getExtension('WEBGL_compressed_texture_astc');\n        this.getExtension('EXT_texture_compression_bptc');\n        this.getExtension('WEBGL_compressed_texture_s3tc');\n        this.getExtension('WEBGL_compressed_texture_etc1');\n        this.getExtension('WEBGL_compressed_texture_pvrtc');\n        this.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n\n        // Create method aliases using extension (WebGL1) or native if available (WebGL2)\n        this.vertexAttribDivisor = this.getExtension('ANGLE_instanced_arrays', 'vertexAttribDivisor', 'vertexAttribDivisorANGLE');\n        this.drawArraysInstanced = this.getExtension('ANGLE_instanced_arrays', 'drawArraysInstanced', 'drawArraysInstancedANGLE');\n        this.drawElementsInstanced = this.getExtension('ANGLE_instanced_arrays', 'drawElementsInstanced', 'drawElementsInstancedANGLE');\n        this.createVertexArray = this.getExtension('OES_vertex_array_object', 'createVertexArray', 'createVertexArrayOES');\n        this.bindVertexArray = this.getExtension('OES_vertex_array_object', 'bindVertexArray', 'bindVertexArrayOES');\n        this.deleteVertexArray = this.getExtension('OES_vertex_array_object', 'deleteVertexArray', 'deleteVertexArrayOES');\n        this.drawBuffers = this.getExtension('WEBGL_draw_buffers', 'drawBuffers', 'drawBuffersWEBGL');\n\n        // Store device parameters\n        this.parameters = {};\n        this.parameters.maxTextureUnits = this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n        this.parameters.maxAnisotropy = this.getExtension('EXT_texture_filter_anisotropic')\n            ? this.gl.getParameter(this.getExtension('EXT_texture_filter_anisotropic').MAX_TEXTURE_MAX_ANISOTROPY_EXT)\n            : 0;\n    }\n\n    setSize(width, height) {\n        this.width = width;\n        this.height = height;\n\n        this.gl.canvas.width = width * this.dpr;\n        this.gl.canvas.height = height * this.dpr;\n\n        if (!this.gl.canvas.style) return;\n        Object.assign(this.gl.canvas.style, {\n            width: width + 'px',\n            height: height + 'px',\n        });\n    }\n\n    setViewport(width, height, x = 0, y = 0) {\n        if (this.state.viewport.width === width && this.state.viewport.height === height) return;\n        this.state.viewport.width = width;\n        this.state.viewport.height = height;\n        this.state.viewport.x = x;\n        this.state.viewport.y = y;\n        this.gl.viewport(x, y, width, height);\n    }\n\n    setScissor(width, height, x = 0, y = 0) {\n        this.gl.scissor(x, y, width, height);\n    }\n\n    enable(id) {\n        if (this.state[id] === true) return;\n        this.gl.enable(id);\n        this.state[id] = true;\n    }\n\n    disable(id) {\n        if (this.state[id] === false) return;\n        this.gl.disable(id);\n        this.state[id] = false;\n    }\n\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        if (\n            this.state.blendFunc.src === src &&\n            this.state.blendFunc.dst === dst &&\n            this.state.blendFunc.srcAlpha === srcAlpha &&\n            this.state.blendFunc.dstAlpha === dstAlpha\n        )\n            return;\n        this.state.blendFunc.src = src;\n        this.state.blendFunc.dst = dst;\n        this.state.blendFunc.srcAlpha = srcAlpha;\n        this.state.blendFunc.dstAlpha = dstAlpha;\n        if (srcAlpha !== undefined) this.gl.blendFuncSeparate(src, dst, srcAlpha, dstAlpha);\n        else this.gl.blendFunc(src, dst);\n    }\n\n    setBlendEquation(modeRGB, modeAlpha) {\n        modeRGB = modeRGB || this.gl.FUNC_ADD;\n        if (this.state.blendEquation.modeRGB === modeRGB && this.state.blendEquation.modeAlpha === modeAlpha) return;\n        this.state.blendEquation.modeRGB = modeRGB;\n        this.state.blendEquation.modeAlpha = modeAlpha;\n        if (modeAlpha !== undefined) this.gl.blendEquationSeparate(modeRGB, modeAlpha);\n        else this.gl.blendEquation(modeRGB);\n    }\n\n    setCullFace(value) {\n        if (this.state.cullFace === value) return;\n        this.state.cullFace = value;\n        this.gl.cullFace(value);\n    }\n\n    setFrontFace(value) {\n        if (this.state.frontFace === value) return;\n        this.state.frontFace = value;\n        this.gl.frontFace(value);\n    }\n\n    setDepthMask(value) {\n        if (this.state.depthMask === value) return;\n        this.state.depthMask = value;\n        this.gl.depthMask(value);\n    }\n\n    setDepthFunc(value) {\n        if (this.state.depthFunc === value) return;\n        this.state.depthFunc = value;\n        this.gl.depthFunc(value);\n    }\n\n    activeTexture(value) {\n        if (this.state.activeTextureUnit === value) return;\n        this.state.activeTextureUnit = value;\n        this.gl.activeTexture(this.gl.TEXTURE0 + value);\n    }\n\n    bindFramebuffer({ target = this.gl.FRAMEBUFFER, buffer = null } = {}) {\n        if (this.state.framebuffer === buffer) return;\n        this.state.framebuffer = buffer;\n        this.gl.bindFramebuffer(target, buffer);\n    }\n\n    getExtension(extension, webgl2Func, extFunc) {\n        // if webgl2 function supported, return func bound to gl context\n        if (webgl2Func && this.gl[webgl2Func]) return this.gl[webgl2Func].bind(this.gl);\n\n        // fetch extension once only\n        if (!this.extensions[extension]) {\n            this.extensions[extension] = this.gl.getExtension(extension);\n        }\n\n        // return extension if no function requested\n        if (!webgl2Func) return this.extensions[extension];\n\n        // Return null if extension not supported\n        if (!this.extensions[extension]) return null;\n\n        // return extension function, bound to extension\n        return this.extensions[extension][extFunc].bind(this.extensions[extension]);\n    }\n\n    sortOpaque(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        } else if (a.program.id !== b.program.id) {\n            return a.program.id - b.program.id;\n        } else if (a.zDepth !== b.zDepth) {\n            return a.zDepth - b.zDepth;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    sortTransparent(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        }\n        if (a.zDepth !== b.zDepth) {\n            return b.zDepth - a.zDepth;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    sortUI(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        } else if (a.program.id !== b.program.id) {\n            return a.program.id - b.program.id;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    getRenderList({ scene, camera, frustumCull, sort }) {\n        let renderList = [];\n\n        if (camera && frustumCull) camera.updateFrustum();\n\n        // Get visible\n        scene.traverse((node) => {\n            if (!node.visible) return true;\n            if (!node.draw) return;\n\n            if (frustumCull && node.frustumCulled && camera) {\n                if (!camera.frustumIntersectsMesh(node)) return;\n            }\n\n            renderList.push(node);\n        });\n\n        if (sort) {\n            const opaque = [];\n            const transparent = []; // depthTest true\n            const ui = []; // depthTest false\n\n            renderList.forEach((node) => {\n                // Split into the 3 render groups\n                if (!node.program.transparent) {\n                    opaque.push(node);\n                } else if (node.program.depthTest) {\n                    transparent.push(node);\n                } else {\n                    ui.push(node);\n                }\n\n                node.zDepth = 0;\n\n                // Only calculate z-depth if renderOrder unset and depthTest is true\n                if (node.renderOrder !== 0 || !node.program.depthTest || !camera) return;\n\n                // update z-depth\n                node.worldMatrix.getTranslation(tempVec3);\n                tempVec3.applyMatrix4(camera.projectionViewMatrix);\n                node.zDepth = tempVec3.z;\n            });\n\n            opaque.sort(this.sortOpaque);\n            transparent.sort(this.sortTransparent);\n            ui.sort(this.sortUI);\n\n            renderList = opaque.concat(transparent, ui);\n        }\n\n        return renderList;\n    }\n\n    render({ scene, camera, target = null, update = true, sort = true, frustumCull = true, clear }) {\n        if (target === null) {\n            // make sure no render target bound so draws to canvas\n            this.bindFramebuffer();\n            this.setViewport(this.width * this.dpr, this.height * this.dpr);\n        } else {\n            // bind supplied render target and update viewport\n            this.bindFramebuffer(target);\n            this.setViewport(target.width, target.height);\n        }\n\n        if (clear || (this.autoClear && clear !== false)) {\n            // Ensure depth buffer writing is enabled so it can be cleared\n            if (this.depth && (!target || target.depth)) {\n                this.enable(this.gl.DEPTH_TEST);\n                this.setDepthMask(true);\n            }\n            this.gl.clear(\n                (this.color ? this.gl.COLOR_BUFFER_BIT : 0) |\n                    (this.depth ? this.gl.DEPTH_BUFFER_BIT : 0) |\n                    (this.stencil ? this.gl.STENCIL_BUFFER_BIT : 0)\n            );\n        }\n\n        // updates all scene graph matrices\n        if (update) scene.updateMatrixWorld();\n\n        // Update camera separately, in case not in scene graph\n        if (camera) camera.updateMatrixWorld();\n\n        // Get render list - entails culling and sorting\n        const renderList = this.getRenderList({ scene, camera, frustumCull, sort });\n\n        renderList.forEach((node) => {\n            node.draw({ camera });\n        });\n    }\n}\n", "const EPSILON = 0.000001;\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let w = a[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let w = a[3];\n    let len = x * x + y * y + z * z + w * w;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    let aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n}\n", "import * as vec4 from './Vec4Func.js';\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n    rad = rad * 0.5;\n    let s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n}\n\n/**\n * Multiplies two quats\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2],\n        bw = b[3];\n\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let by = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bz = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2],\n        bw = b[3];\n\n    let omega, cosom, sinom, scale0, scale1;\n\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if (cosom < 0.0) {\n        cosom = -cosom;\n        bx = -bx;\n        by = -by;\n        bz = -bz;\n        bw = -bw;\n    }\n    // calculate coefficients\n    if (1.0 - cosom > 0.000001) {\n        // standard case (slerp)\n        omega = Math.acos(cosom);\n        sinom = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {\n        // \"from\" and \"to\" quaternions are very close\n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n\n    return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n    let a0 = a[0],\n        a1 = a[1],\n        a2 = a[2],\n        a3 = a[3];\n    let dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n    let invDot = dot ? 1.0 / dot : 0;\n\n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    out[0] = -a0 * invDot;\n    out[1] = -a1 * invDot;\n    out[2] = -a2 * invDot;\n    out[3] = a3 * invDot;\n    return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    let fTrace = m[0] + m[4] + m[8];\n    let fRoot;\n\n    if (fTrace > 0.0) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0); // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot; // 1/(4w)\n        out[0] = (m[5] - m[7]) * fRoot;\n        out[1] = (m[6] - m[2]) * fRoot;\n        out[2] = (m[1] - m[3]) * fRoot;\n    } else {\n        // |w| <= 1/2\n        let i = 0;\n        if (m[4] > m[0]) i = 1;\n        if (m[8] > m[i * 3 + i]) i = 2;\n        let j = (i + 1) % 3;\n        let k = (i + 2) % 3;\n\n        fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n        out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n        out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n    }\n\n    return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} euler Angles to rotate around each axis in degrees.\n * @param {String} order detailing order of operations. Default 'XYZ'.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, euler, order = 'YXZ') {\n    let sx = Math.sin(euler[0] * 0.5);\n    let cx = Math.cos(euler[0] * 0.5);\n    let sy = Math.sin(euler[1] * 0.5);\n    let cy = Math.cos(euler[1] * 0.5);\n    let sz = Math.sin(euler[2] * 0.5);\n    let cz = Math.cos(euler[2] * 0.5);\n\n    if (order === 'XYZ') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'YXZ') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === 'ZXY') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'ZYX') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === 'YZX') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'XZY') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    }\n\n    return out;\n}\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n", "import * as QuatFunc from './functions/QuatFunc.js';\n\nexport class Quat extends Array {\n    constructor(x = 0, y = 0, z = 0, w = 1) {\n        super(x, y, z, w);\n        this.onChange = () => {};\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    get w() {\n        return this[3];\n    }\n\n    set x(v) {\n        this[0] = v;\n        this.onChange();\n    }\n\n    set y(v) {\n        this[1] = v;\n        this.onChange();\n    }\n\n    set z(v) {\n        this[2] = v;\n        this.onChange();\n    }\n\n    set w(v) {\n        this[3] = v;\n        this.onChange();\n    }\n\n    identity() {\n        QuatFunc.identity(this);\n        this.onChange();\n        return this;\n    }\n\n    set(x, y, z, w) {\n        if (x.length) return this.copy(x);\n        QuatFunc.set(this, x, y, z, w);\n        this.onChange();\n        return this;\n    }\n\n    rotateX(a) {\n        QuatFunc.rotateX(this, this, a);\n        this.onChange();\n        return this;\n    }\n\n    rotateY(a) {\n        QuatFunc.rotateY(this, this, a);\n        this.onChange();\n        return this;\n    }\n\n    rotateZ(a) {\n        QuatFunc.rotateZ(this, this, a);\n        this.onChange();\n        return this;\n    }\n\n    inverse(q = this) {\n        QuatFunc.invert(this, q);\n        this.onChange();\n        return this;\n    }\n\n    conjugate(q = this) {\n        QuatFunc.conjugate(this, q);\n        this.onChange();\n        return this;\n    }\n\n    copy(q) {\n        QuatFunc.copy(this, q);\n        this.onChange();\n        return this;\n    }\n\n    normalize(q = this) {\n        QuatFunc.normalize(this, q);\n        this.onChange();\n        return this;\n    }\n\n    multiply(qA, qB) {\n        if (qB) {\n            QuatFunc.multiply(this, qA, qB);\n        } else {\n            QuatFunc.multiply(this, this, qA);\n        }\n        this.onChange();\n        return this;\n    }\n\n    dot(v) {\n        return QuatFunc.dot(this, v);\n    }\n\n    fromMatrix3(matrix3) {\n        QuatFunc.fromMat3(this, matrix3);\n        this.onChange();\n        return this;\n    }\n\n    fromEuler(euler) {\n        QuatFunc.fromEuler(this, euler, euler.order);\n        return this;\n    }\n\n    fromAxisAngle(axis, a) {\n        QuatFunc.setAxisAngle(this, axis, a);\n        this.onChange();\n        return this;\n    }\n\n    slerp(q, t) {\n        QuatFunc.slerp(this, this, q, t);\n        this.onChange();\n        return this;\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        this[3] = a[o + 3];\n        this.onChange();\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        return a;\n    }\n}\n", "const EPSILON = 0.000001;\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n}\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        let a01 = a[1],\n            a02 = a[2],\n            a03 = a[3];\n        let a12 = a[6],\n            a13 = a[7];\n        let a23 = a[11];\n\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n\n    return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    let b0 = b[0],\n        b1 = b[1],\n        b2 = b[2],\n        b3 = b[3];\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[4];\n    b1 = b[5];\n    b2 = b[6];\n    b3 = b[7];\n    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[8];\n    b1 = b[9];\n    b2 = b[10];\n    b3 = b[11];\n    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[12];\n    b1 = b[13];\n    b2 = b[14];\n    b3 = b[15];\n    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n    let x = v[0],\n        y = v[1],\n        z = v[2];\n    let a00, a01, a02, a03;\n    let a10, a11, a12, a13;\n    let a20, a21, a22, a23;\n\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0];\n        a01 = a[1];\n        a02 = a[2];\n        a03 = a[3];\n        a10 = a[4];\n        a11 = a[5];\n        a12 = a[6];\n        a13 = a[7];\n        a20 = a[8];\n        a21 = a[9];\n        a22 = a[10];\n        a23 = a[11];\n\n        out[0] = a00;\n        out[1] = a01;\n        out[2] = a02;\n        out[3] = a03;\n        out[4] = a10;\n        out[5] = a11;\n        out[6] = a12;\n        out[7] = a13;\n        out[8] = a20;\n        out[9] = a21;\n        out[10] = a22;\n        out[11] = a23;\n\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n    let x = v[0],\n        y = v[1],\n        z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n    let x = axis[0],\n        y = axis[1],\n        z = axis[2];\n    let len = Math.hypot(x, y, z);\n    let s, c, t;\n    let a00, a01, a02, a03;\n    let a10, a11, a12, a13;\n    let a20, a21, a22, a23;\n    let b00, b01, b02;\n    let b10, b11, b12;\n    let b20, b21, b22;\n\n    if (Math.abs(len) < EPSILON) {\n        return null;\n    }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c;\n    b01 = y * x * t + z * s;\n    b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s;\n    b11 = y * y * t + c;\n    b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s;\n    b21 = y * z * t - x * s;\n    b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) {\n        // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n    out[0] = mat[12];\n    out[1] = mat[13];\n    out[2] = mat[14];\n\n    return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n    let m11 = mat[0];\n    let m12 = mat[1];\n    let m13 = mat[2];\n    let m21 = mat[4];\n    let m22 = mat[5];\n    let m23 = mat[6];\n    let m31 = mat[8];\n    let m32 = mat[9];\n    let m33 = mat[10];\n\n    out[0] = Math.hypot(m11, m12, m13);\n    out[1] = Math.hypot(m21, m22, m23);\n    out[2] = Math.hypot(m31, m32, m33);\n\n    return out;\n}\n\nexport function getMaxScaleOnAxis(mat) {\n    let m11 = mat[0];\n    let m12 = mat[1];\n    let m13 = mat[2];\n    let m21 = mat[4];\n    let m22 = mat[5];\n    let m23 = mat[6];\n    let m31 = mat[8];\n    let m32 = mat[9];\n    let m33 = mat[10];\n\n    const x = m11 * m11 + m12 * m12 + m13 * m13;\n    const y = m21 * m21 + m22 * m22 + m23 * m23;\n    const z = m31 * m31 + m32 * m32 + m33 * m33;\n\n    return Math.sqrt(Math.max(x, y, z));\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport const getRotation = (function () {\n    const temp = [0, 0, 0];\n\n    return function (out, mat) {\n        let scaling = temp;\n        getScaling(scaling, mat);\n\n        let is1 = 1 / scaling[0];\n        let is2 = 1 / scaling[1];\n        let is3 = 1 / scaling[2];\n\n        let sm11 = mat[0] * is1;\n        let sm12 = mat[1] * is2;\n        let sm13 = mat[2] * is3;\n        let sm21 = mat[4] * is1;\n        let sm22 = mat[5] * is2;\n        let sm23 = mat[6] * is3;\n        let sm31 = mat[8] * is1;\n        let sm32 = mat[9] * is2;\n        let sm33 = mat[10] * is3;\n\n        let trace = sm11 + sm22 + sm33;\n        let S = 0;\n\n        if (trace > 0) {\n            S = Math.sqrt(trace + 1.0) * 2;\n            out[3] = 0.25 * S;\n            out[0] = (sm23 - sm32) / S;\n            out[1] = (sm31 - sm13) / S;\n            out[2] = (sm12 - sm21) / S;\n        } else if (sm11 > sm22 && sm11 > sm33) {\n            S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n            out[3] = (sm23 - sm32) / S;\n            out[0] = 0.25 * S;\n            out[1] = (sm12 + sm21) / S;\n            out[2] = (sm31 + sm13) / S;\n        } else if (sm22 > sm33) {\n            S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n            out[3] = (sm31 - sm13) / S;\n            out[0] = (sm12 + sm21) / S;\n            out[1] = 0.25 * S;\n            out[2] = (sm23 + sm32) / S;\n        } else {\n            S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n            out[3] = (sm12 - sm21) / S;\n            out[0] = (sm31 + sm13) / S;\n            out[1] = (sm23 + sm32) / S;\n            out[2] = 0.25 * S;\n        }\n\n        return out;\n    };\n})();\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n    // Quaternion math\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let xy = x * y2;\n    let xz = x * z2;\n    let yy = y * y2;\n    let yz = y * z2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n    let sx = s[0];\n    let sy = s[1];\n    let sz = s[2];\n\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspective(out, fovy, aspect, near, far) {\n    let f = 1.0 / Math.tan(fovy / 2);\n    let nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 2 * far * near * nf;\n    out[15] = 0;\n    return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function ortho(out, left, right, bottom, top, near, far) {\n    let lr = 1 / (left - right);\n    let bt = 1 / (bottom - top);\n    let nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} target Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n    let eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2];\n\n    let z0 = eyex - target[0],\n        z1 = eyey - target[1],\n        z2 = eyez - target[2];\n\n    let len = z0 * z0 + z1 * z1 + z2 * z2;\n    if (len === 0) {\n        // eye and target are in the same position\n        z2 = 1;\n    } else {\n        len = 1 / Math.sqrt(len);\n        z0 *= len;\n        z1 *= len;\n        z2 *= len;\n    }\n\n    let x0 = upy * z2 - upz * z1,\n        x1 = upz * z0 - upx * z2,\n        x2 = upx * z1 - upy * z0;\n\n    len = x0 * x0 + x1 * x1 + x2 * x2;\n    if (len === 0) {\n        // up and z are parallel\n        if (upz) {\n            upx += 1e-6;\n        } else if (upy) {\n            upz += 1e-6;\n        } else {\n            upy += 1e-6;\n        }\n        (x0 = upy * z2 - upz * z1), (x1 = upz * z0 - upx * z2), (x2 = upx * z1 - upy * z0);\n\n        len = x0 * x0 + x1 * x1 + x2 * x2;\n    }\n\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n\n    out[0] = x0;\n    out[1] = x1;\n    out[2] = x2;\n    out[3] = 0;\n    out[4] = z1 * x2 - z2 * x1;\n    out[5] = z2 * x0 - z0 * x2;\n    out[6] = z0 * x1 - z1 * x0;\n    out[7] = 0;\n    out[8] = z0;\n    out[9] = z1;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = eyex;\n    out[13] = eyey;\n    out[14] = eyez;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    out[9] = a[9] + b[9];\n    out[10] = a[10] + b[10];\n    out[11] = a[11] + b[11];\n    out[12] = a[12] + b[12];\n    out[13] = a[13] + b[13];\n    out[14] = a[14] + b[14];\n    out[15] = a[15] + b[15];\n    return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    out[9] = a[9] - b[9];\n    out[10] = a[10] - b[10];\n    out[11] = a[11] - b[11];\n    out[12] = a[12] - b[12];\n    out[13] = a[13] - b[13];\n    out[14] = a[14] - b[14];\n    out[15] = a[15] - b[15];\n    return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    out[9] = a[9] * b;\n    out[10] = a[10] * b;\n    out[11] = a[11] * b;\n    out[12] = a[12] * b;\n    out[13] = a[13] * b;\n    out[14] = a[14] * b;\n    out[15] = a[15] * b;\n    return out;\n}\n", "import * as Mat4Func from './functions/Mat4Func.js';\n\nexport class Mat4 extends Array {\n    constructor(\n        m00 = 1,\n        m01 = 0,\n        m02 = 0,\n        m03 = 0,\n        m10 = 0,\n        m11 = 1,\n        m12 = 0,\n        m13 = 0,\n        m20 = 0,\n        m21 = 0,\n        m22 = 1,\n        m23 = 0,\n        m30 = 0,\n        m31 = 0,\n        m32 = 0,\n        m33 = 1\n    ) {\n        super(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n        return this;\n    }\n\n    get x() {\n        return this[12];\n    }\n\n    get y() {\n        return this[13];\n    }\n\n    get z() {\n        return this[14];\n    }\n\n    get w() {\n        return this[15];\n    }\n\n    set x(v) {\n        this[12] = v;\n    }\n\n    set y(v) {\n        this[13] = v;\n    }\n\n    set z(v) {\n        this[14] = v;\n    }\n\n    set w(v) {\n        this[15] = v;\n    }\n\n    set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n        if (m00.length) return this.copy(m00);\n        Mat4Func.set(this, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n        return this;\n    }\n\n    translate(v, m = this) {\n        Mat4Func.translate(this, m, v);\n        return this;\n    }\n\n    rotate(v, axis, m = this) {\n        Mat4Func.rotate(this, m, v, axis);\n        return this;\n    }\n\n    scale(v, m = this) {\n        Mat4Func.scale(this, m, typeof v === 'number' ? [v, v, v] : v);\n        return this;\n    }\n\n    add(ma, mb) {\n        if (mb) Mat4Func.add(this, ma, mb);\n        else Mat4Func.add(this, this, ma);\n        return this;\n    }\n\n    sub(ma, mb) {\n        if (mb) Mat4Func.subtract(this, ma, mb);\n        else Mat4Func.subtract(this, this, ma);\n        return this;\n    }\n\n    multiply(ma, mb) {\n        if (!ma.length) {\n            Mat4Func.multiplyScalar(this, this, ma);\n        } else if (mb) {\n            Mat4Func.multiply(this, ma, mb);\n        } else {\n            Mat4Func.multiply(this, this, ma);\n        }\n        return this;\n    }\n\n    identity() {\n        Mat4Func.identity(this);\n        return this;\n    }\n\n    copy(m) {\n        Mat4Func.copy(this, m);\n        return this;\n    }\n\n    fromPerspective({ fov, aspect, near, far } = {}) {\n        Mat4Func.perspective(this, fov, aspect, near, far);\n        return this;\n    }\n\n    fromOrthogonal({ left, right, bottom, top, near, far }) {\n        Mat4Func.ortho(this, left, right, bottom, top, near, far);\n        return this;\n    }\n\n    fromQuaternion(q) {\n        Mat4Func.fromQuat(this, q);\n        return this;\n    }\n\n    setPosition(v) {\n        this.x = v[0];\n        this.y = v[1];\n        this.z = v[2];\n        return this;\n    }\n\n    inverse(m = this) {\n        Mat4Func.invert(this, m);\n        return this;\n    }\n\n    compose(q, pos, scale) {\n        Mat4Func.fromRotationTranslationScale(this, q, pos, scale);\n        return this;\n    }\n\n    getRotation(q) {\n        Mat4Func.getRotation(q, this);\n        return this;\n    }\n\n    getTranslation(pos) {\n        Mat4Func.getTranslation(pos, this);\n        return this;\n    }\n\n    getScaling(scale) {\n        Mat4Func.getScaling(scale, this);\n        return this;\n    }\n\n    getMaxScaleOnAxis() {\n        return Mat4Func.getMaxScaleOnAxis(this);\n    }\n\n    lookAt(eye, target, up) {\n        Mat4Func.targetTo(this, eye, target, up);\n        return this;\n    }\n\n    determinant() {\n        return Mat4Func.determinant(this);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        this[3] = a[o + 3];\n        this[4] = a[o + 4];\n        this[5] = a[o + 5];\n        this[6] = a[o + 6];\n        this[7] = a[o + 7];\n        this[8] = a[o + 8];\n        this[9] = a[o + 9];\n        this[10] = a[o + 10];\n        this[11] = a[o + 11];\n        this[12] = a[o + 12];\n        this[13] = a[o + 13];\n        this[14] = a[o + 14];\n        this[15] = a[o + 15];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        a[o + 4] = this[4];\n        a[o + 5] = this[5];\n        a[o + 6] = this[6];\n        a[o + 7] = this[7];\n        a[o + 8] = this[8];\n        a[o + 9] = this[9];\n        a[o + 10] = this[10];\n        a[o + 11] = this[11];\n        a[o + 12] = this[12];\n        a[o + 13] = this[13];\n        a[o + 14] = this[14];\n        a[o + 15] = this[15];\n        return a;\n    }\n}\n", "// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\nexport function fromRotationMatrix(out, m, order = 'YXZ') {\n    if (order === 'XYZ') {\n        out[1] = Math.asin(Math.min(Math.max(m[8], -1), 1));\n        if (Math.abs(m[8]) < 0.99999) {\n            out[0] = Math.atan2(-m[9], m[10]);\n            out[2] = Math.atan2(-m[4], m[0]);\n        } else {\n            out[0] = Math.atan2(m[6], m[5]);\n            out[2] = 0;\n        }\n    } else if (order === 'YXZ') {\n        out[0] = Math.asin(-Math.min(Math.max(m[9], -1), 1));\n        if (Math.abs(m[9]) < 0.99999) {\n            out[1] = Math.atan2(m[8], m[10]);\n            out[2] = Math.atan2(m[1], m[5]);\n        } else {\n            out[1] = Math.atan2(-m[2], m[0]);\n            out[2] = 0;\n        }\n    } else if (order === 'ZXY') {\n        out[0] = Math.asin(Math.min(Math.max(m[6], -1), 1));\n        if (Math.abs(m[6]) < 0.99999) {\n            out[1] = Math.atan2(-m[2], m[10]);\n            out[2] = Math.atan2(-m[4], m[5]);\n        } else {\n            out[1] = 0;\n            out[2] = Math.atan2(m[1], m[0]);\n        }\n    } else if (order === 'ZYX') {\n        out[1] = Math.asin(-Math.min(Math.max(m[2], -1), 1));\n        if (Math.abs(m[2]) < 0.99999) {\n            out[0] = Math.atan2(m[6], m[10]);\n            out[2] = Math.atan2(m[1], m[0]);\n        } else {\n            out[0] = 0;\n            out[2] = Math.atan2(-m[4], m[5]);\n        }\n    } else if (order === 'YZX') {\n        out[2] = Math.asin(Math.min(Math.max(m[1], -1), 1));\n        if (Math.abs(m[1]) < 0.99999) {\n            out[0] = Math.atan2(-m[9], m[5]);\n            out[1] = Math.atan2(-m[2], m[0]);\n        } else {\n            out[0] = 0;\n            out[1] = Math.atan2(m[8], m[10]);\n        }\n    } else if (order === 'XZY') {\n        out[2] = Math.asin(-Math.min(Math.max(m[4], -1), 1));\n        if (Math.abs(m[4]) < 0.99999) {\n            out[0] = Math.atan2(m[6], m[5]);\n            out[1] = Math.atan2(m[8], m[0]);\n        } else {\n            out[0] = Math.atan2(-m[9], m[10]);\n            out[1] = 0;\n        }\n    }\n\n    return out;\n}\n", "import * as EulerFunc from './functions/EulerFunc.js';\nimport { Mat4 } from './Mat4.js';\n\nconst tmpMat4 = new Mat4();\n\nexport class Euler extends Array {\n    constructor(x = 0, y = x, z = x, order = 'YXZ') {\n        super(x, y, z);\n        this.order = order;\n        this.onChange = () => {};\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    set x(v) {\n        this[0] = v;\n        this.onChange();\n    }\n\n    set y(v) {\n        this[1] = v;\n        this.onChange();\n    }\n\n    set z(v) {\n        this[2] = v;\n        this.onChange();\n    }\n\n    set(x, y = x, z = x) {\n        if (x.length) return this.copy(x);\n        this[0] = x;\n        this[1] = y;\n        this[2] = z;\n        this.onChange();\n        return this;\n    }\n\n    copy(v) {\n        this[0] = v[0];\n        this[1] = v[1];\n        this[2] = v[2];\n        this.onChange();\n        return this;\n    }\n\n    reorder(order) {\n        this.order = order;\n        this.onChange();\n        return this;\n    }\n\n    fromRotationMatrix(m, order = this.order) {\n        EulerFunc.fromRotationMatrix(this, m, order);\n        this.onChange();\n        return this;\n    }\n\n    fromQuaternion(q, order = this.order) {\n        tmpMat4.fromQuaternion(q);\n        return this.fromRotationMatrix(tmpMat4, order);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        return a;\n    }\n}\n", "import { Vec3 } from '../math/Vec3.js';\nimport { Quat } from '../math/Quat.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Euler } from '../math/Euler.js';\n\nexport class Transform {\n    constructor() {\n        this.parent = null;\n        this.children = [];\n        this.visible = true;\n\n        this.matrix = new Mat4();\n        this.worldMatrix = new Mat4();\n        this.matrixAutoUpdate = true;\n\n        this.position = new Vec3();\n        this.quaternion = new Quat();\n        this.scale = new Vec3(1);\n        this.rotation = new Euler();\n        this.up = new Vec3(0, 1, 0);\n\n        this.rotation.onChange = () => this.quaternion.fromEuler(this.rotation);\n        this.quaternion.onChange = () => this.rotation.fromQuaternion(this.quaternion);\n    }\n\n    setParent(parent, notifyParent = true) {\n        if (this.parent && parent !== this.parent) this.parent.removeChild(this, false);\n        this.parent = parent;\n        if (notifyParent && parent) parent.addChild(this, false);\n    }\n\n    addChild(child, notifyChild = true) {\n        if (!~this.children.indexOf(child)) this.children.push(child);\n        if (notifyChild) child.setParent(this, false);\n    }\n\n    removeChild(child, notifyChild = true) {\n        if (!!~this.children.indexOf(child)) this.children.splice(this.children.indexOf(child), 1);\n        if (notifyChild) child.setParent(null, false);\n    }\n\n    updateMatrixWorld(force) {\n        if (this.matrixAutoUpdate) this.updateMatrix();\n        if (this.worldMatrixNeedsUpdate || force) {\n            if (this.parent === null) this.worldMatrix.copy(this.matrix);\n            else this.worldMatrix.multiply(this.parent.worldMatrix, this.matrix);\n            this.worldMatrixNeedsUpdate = false;\n            force = true;\n        }\n\n        for (let i = 0, l = this.children.length; i < l; i++) {\n            this.children[i].updateMatrixWorld(force);\n        }\n    }\n\n    updateMatrix() {\n        this.matrix.compose(this.quaternion, this.position, this.scale);\n        this.worldMatrixNeedsUpdate = true;\n    }\n\n    traverse(callback) {\n        // Return true in callback to stop traversing children\n        if (callback(this)) return;\n        for (let i = 0, l = this.children.length; i < l; i++) {\n            this.children[i].traverse(callback);\n        }\n    }\n\n    decompose() {\n        this.matrix.getTranslation(this.position);\n        this.matrix.getRotation(this.quaternion);\n        this.matrix.getScaling(this.scale);\n        this.rotation.fromQuaternion(this.quaternion);\n    }\n\n    lookAt(target, invert = false) {\n        if (invert) this.matrix.lookAt(this.position, target, this.up);\n        else this.matrix.lookAt(target, this.position, this.up);\n        this.matrix.getRotation(this.quaternion);\n        this.rotation.fromQuaternion(this.quaternion);\n    }\n}\n", "import { Transform } from './Transform.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Vec3 } from '../math/Vec3.js';\n\nconst tempMat4 = new Mat4();\nconst tempVec3a = new Vec3();\nconst tempVec3b = new Vec3();\n\nexport class Camera extends Transform {\n    constructor(gl, { near = 0.1, far = 100, fov = 45, aspect = 1, left, right, bottom, top, zoom = 1 } = {}) {\n        super();\n\n        Object.assign(this, { near, far, fov, aspect, left, right, bottom, top, zoom });\n\n        this.projectionMatrix = new Mat4();\n        this.viewMatrix = new Mat4();\n        this.projectionViewMatrix = new Mat4();\n        this.worldPosition = new Vec3();\n\n        // Use orthographic if left/right set, else default to perspective camera\n        this.type = left || right ? 'orthographic' : 'perspective';\n\n        if (this.type === 'orthographic') this.orthographic();\n        else this.perspective();\n    }\n\n    perspective({ near = this.near, far = this.far, fov = this.fov, aspect = this.aspect } = {}) {\n        Object.assign(this, { near, far, fov, aspect });\n        this.projectionMatrix.fromPerspective({ fov: fov * (Math.PI / 180), aspect, near, far });\n        this.type = 'perspective';\n        return this;\n    }\n\n    orthographic({\n        near = this.near,\n        far = this.far,\n        left = this.left || -1,\n        right = this.right || 1,\n        bottom = this.bottom || -1,\n        top = this.top || 1,\n        zoom = this.zoom,\n    } = {}) {\n        Object.assign(this, { near, far, left, right, bottom, top, zoom });\n        left /= zoom;\n        right /= zoom;\n        bottom /= zoom;\n        top /= zoom;\n        this.projectionMatrix.fromOrthogonal({ left, right, bottom, top, near, far });\n        this.type = 'orthographic';\n        return this;\n    }\n\n    updateMatrixWorld() {\n        super.updateMatrixWorld();\n        this.viewMatrix.inverse(this.worldMatrix);\n        this.worldMatrix.getTranslation(this.worldPosition);\n\n        // used for sorting\n        this.projectionViewMatrix.multiply(this.projectionMatrix, this.viewMatrix);\n        return this;\n    }\n\n    lookAt(target) {\n        super.lookAt(target, true);\n        return this;\n    }\n\n    // Project 3D coordinate to 2D point\n    project(v) {\n        v.applyMatrix4(this.viewMatrix);\n        v.applyMatrix4(this.projectionMatrix);\n        return this;\n    }\n\n    // Unproject 2D point to 3D coordinate\n    unproject(v) {\n        v.applyMatrix4(tempMat4.inverse(this.projectionMatrix));\n        v.applyMatrix4(this.worldMatrix);\n        return this;\n    }\n\n    updateFrustum() {\n        if (!this.frustum) {\n            this.frustum = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\n        }\n\n        const m = this.projectionViewMatrix;\n        this.frustum[0].set(m[3] - m[0], m[7] - m[4], m[11] - m[8]).constant = m[15] - m[12]; // -x\n        this.frustum[1].set(m[3] + m[0], m[7] + m[4], m[11] + m[8]).constant = m[15] + m[12]; // +x\n        this.frustum[2].set(m[3] + m[1], m[7] + m[5], m[11] + m[9]).constant = m[15] + m[13]; // +y\n        this.frustum[3].set(m[3] - m[1], m[7] - m[5], m[11] - m[9]).constant = m[15] - m[13]; // -y\n        this.frustum[4].set(m[3] - m[2], m[7] - m[6], m[11] - m[10]).constant = m[15] - m[14]; // +z (far)\n        this.frustum[5].set(m[3] + m[2], m[7] + m[6], m[11] + m[10]).constant = m[15] + m[14]; // -z (near)\n\n        for (let i = 0; i < 6; i++) {\n            const invLen = 1.0 / this.frustum[i].distance();\n            this.frustum[i].multiply(invLen);\n            this.frustum[i].constant *= invLen;\n        }\n    }\n\n    frustumIntersectsMesh(node, worldMatrix = node.worldMatrix) {\n        // If no position attribute, treat as frustumCulled false\n        if (!node.geometry.attributes.position) return true;\n\n        if (!node.geometry.bounds || node.geometry.bounds.radius === Infinity) node.geometry.computeBoundingSphere();\n\n        if (!node.geometry.bounds) return true;\n\n        const center = tempVec3a;\n        center.copy(node.geometry.bounds.center);\n        center.applyMatrix4(worldMatrix);\n\n        const radius = node.geometry.bounds.radius * worldMatrix.getMaxScaleOnAxis();\n\n        return this.frustumIntersectsSphere(center, radius);\n    }\n\n    frustumIntersectsSphere(center, radius) {\n        const normal = tempVec3b;\n\n        for (let i = 0; i < 6; i++) {\n            const plane = this.frustum[i];\n            const distance = normal.copy(plane).dot(center) + plane.constant;\n            if (distance < -radius) return false;\n        }\n        return true;\n    }\n}\n", "const EPSILON = 0.000001;\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n}\n\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\nexport function fromQuat(out, q) {\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n\n    return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        let a01 = a[1],\n            a02 = a[2],\n            a12 = a[5];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a01;\n        out[5] = a[7];\n        out[6] = a02;\n        out[7] = a12;\n    } else {\n        out[0] = a[0];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a[1];\n        out[4] = a[4];\n        out[5] = a[7];\n        out[6] = a[2];\n        out[7] = a[5];\n        out[8] = a[8];\n    }\n\n    return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    let b01 = a22 * a11 - a12 * a21;\n    let b11 = -a22 * a10 + a12 * a20;\n    let b21 = a21 * a10 - a11 * a20;\n\n    // Calculate the determinant\n    let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    let b00 = b[0],\n        b01 = b[1],\n        b02 = b[2];\n    let b10 = b[3],\n        b11 = b[4],\n        b12 = b[5];\n    let b20 = b[6],\n        b21 = b[7],\n        b22 = b[8];\n\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a10 = a[3],\n        a11 = a[4],\n        a12 = a[5],\n        a20 = a[6],\n        a21 = a[7],\n        a22 = a[8],\n        x = v[0],\n        y = v[1];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a10 = a[3],\n        a11 = a[4],\n        a12 = a[5],\n        a20 = a[6],\n        a21 = a[7],\n        a22 = a[8],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n}\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n    let x = v[0],\n        y = v[1];\n\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {mat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\nexport function normalFromMat4(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n    return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    return out;\n}\n", "import * as Mat3Func from './functions/Mat3Func.js';\n\nexport class Mat3 extends Array {\n    constructor(m00 = 1, m01 = 0, m02 = 0, m10 = 0, m11 = 1, m12 = 0, m20 = 0, m21 = 0, m22 = 1) {\n        super(m00, m01, m02, m10, m11, m12, m20, m21, m22);\n        return this;\n    }\n\n    set(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n        if (m00.length) return this.copy(m00);\n        Mat3Func.set(this, m00, m01, m02, m10, m11, m12, m20, m21, m22);\n        return this;\n    }\n\n    translate(v, m = this) {\n        Mat3Func.translate(this, m, v);\n        return this;\n    }\n\n    rotate(v, m = this) {\n        Mat3Func.rotate(this, m, v);\n        return this;\n    }\n\n    scale(v, m = this) {\n        Mat3Func.scale(this, m, v);\n        return this;\n    }\n\n    multiply(ma, mb) {\n        if (mb) {\n            Mat3Func.multiply(this, ma, mb);\n        } else {\n            Mat3Func.multiply(this, this, ma);\n        }\n        return this;\n    }\n\n    identity() {\n        Mat3Func.identity(this);\n        return this;\n    }\n\n    copy(m) {\n        Mat3Func.copy(this, m);\n        return this;\n    }\n\n    fromMatrix4(m) {\n        Mat3Func.fromMat4(this, m);\n        return this;\n    }\n\n    fromQuaternion(q) {\n        Mat3Func.fromQuat(this, q);\n        return this;\n    }\n\n    fromBasis(vec3a, vec3b, vec3c) {\n        this.set(vec3a[0], vec3a[1], vec3a[2], vec3b[0], vec3b[1], vec3b[2], vec3c[0], vec3c[1], vec3c[2]);\n        return this;\n    }\n\n    inverse(m = this) {\n        Mat3Func.invert(this, m);\n        return this;\n    }\n\n    getNormalMatrix(m) {\n        Mat3Func.normalFromMat4(this, m);\n        return this;\n    }\n}\n", "import { Transform } from './Transform.js';\nimport { Mat3 } from '../math/Mat3.js';\nimport { Mat4 } from '../math/Mat4.js';\n\nlet ID = 0;\n\nexport class Mesh extends Transform {\n    constructor(gl, { geometry, program, mode = gl.TRIANGLES, frustumCulled = true, renderOrder = 0 } = {}) {\n        super();\n        if (!gl.canvas) console.error('gl not passed as first argument to Mesh');\n        this.gl = gl;\n        this.id = ID++;\n        this.geometry = geometry;\n        this.program = program;\n        this.mode = mode;\n\n        // Used to skip frustum culling\n        this.frustumCulled = frustumCulled;\n\n        // Override sorting to force an order\n        this.renderOrder = renderOrder;\n        this.modelViewMatrix = new Mat4();\n        this.normalMatrix = new Mat3();\n        this.beforeRenderCallbacks = [];\n        this.afterRenderCallbacks = [];\n    }\n\n    onBeforeRender(f) {\n        this.beforeRenderCallbacks.push(f);\n        return this;\n    }\n\n    onAfterRender(f) {\n        this.afterRenderCallbacks.push(f);\n        return this;\n    }\n\n    draw({ camera } = {}) {\n        if (camera) {\n            // Add empty matrix uniforms to program if unset\n            if (!this.program.uniforms.modelMatrix) {\n                Object.assign(this.program.uniforms, {\n                    modelMatrix: { value: null },\n                    viewMatrix: { value: null },\n                    modelViewMatrix: { value: null },\n                    normalMatrix: { value: null },\n                    projectionMatrix: { value: null },\n                    cameraPosition: { value: null },\n                });\n            }\n\n            // Set the matrix uniforms\n            this.program.uniforms.projectionMatrix.value = camera.projectionMatrix;\n            this.program.uniforms.cameraPosition.value = camera.worldPosition;\n            this.program.uniforms.viewMatrix.value = camera.viewMatrix;\n            this.modelViewMatrix.multiply(camera.viewMatrix, this.worldMatrix);\n            this.normalMatrix.getNormalMatrix(this.modelViewMatrix);\n            this.program.uniforms.modelMatrix.value = this.worldMatrix;\n            this.program.uniforms.modelViewMatrix.value = this.modelViewMatrix;\n            this.program.uniforms.normalMatrix.value = this.normalMatrix;\n        }\n        this.beforeRenderCallbacks.forEach((f) => f && f({ mesh: this, camera }));\n\n        // determine if faces need to be flipped - when mesh scaled negatively\n        let flipFaces = this.program.cullFace && this.worldMatrix.determinant() < 0;\n        this.program.use({ flipFaces });\n        this.geometry.draw({ mode: this.mode, program: this.program });\n        this.afterRenderCallbacks.forEach((f) => f && f({ mesh: this, camera }));\n    }\n}\n", "// TODO: delete texture\n// TODO: use texSubImage2D for updates (video or when loaded)\n// TODO: need? encoding = linearEncoding\n// TODO: support non-compressed mipmaps uploads\n\nconst emptyPixel = new Uint8Array(4);\n\nfunction isPowerOf2(value) {\n    return (value & (value - 1)) === 0;\n}\n\nlet ID = 1;\n\nexport class Texture {\n    constructor(\n        gl,\n        {\n            image,\n            target = gl.TEXTURE_2D,\n            type = gl.UNSIGNED_BYTE,\n            format = gl.RGBA,\n            internalFormat = format,\n            wrapS = gl.CLAMP_TO_EDGE,\n            wrapT = gl.CLAMP_TO_EDGE,\n            generateMipmaps = true,\n            minFilter = generateMipmaps ? gl.NEAREST_MIPMAP_LINEAR : gl.LINEAR,\n            magFilter = gl.LINEAR,\n            premultiplyAlpha = false,\n            unpackAlignment = 4,\n            flipY = target == gl.TEXTURE_2D ? true : false,\n            anisotropy = 0,\n            level = 0,\n            width, // used for RenderTargets or Data Textures\n            height = width,\n        } = {}\n    ) {\n        this.gl = gl;\n        this.id = ID++;\n\n        this.image = image;\n        this.target = target;\n        this.type = type;\n        this.format = format;\n        this.internalFormat = internalFormat;\n        this.minFilter = minFilter;\n        this.magFilter = magFilter;\n        this.wrapS = wrapS;\n        this.wrapT = wrapT;\n        this.generateMipmaps = generateMipmaps;\n        this.premultiplyAlpha = premultiplyAlpha;\n        this.unpackAlignment = unpackAlignment;\n        this.flipY = flipY;\n        this.anisotropy = Math.min(anisotropy, this.gl.renderer.parameters.maxAnisotropy);\n        this.level = level;\n        this.width = width;\n        this.height = height;\n        this.texture = this.gl.createTexture();\n\n        this.store = {\n            image: null,\n        };\n\n        // Alias for state store to avoid redundant calls for global state\n        this.glState = this.gl.renderer.state;\n\n        // State store to avoid redundant calls for per-texture state\n        this.state = {};\n        this.state.minFilter = this.gl.NEAREST_MIPMAP_LINEAR;\n        this.state.magFilter = this.gl.LINEAR;\n        this.state.wrapS = this.gl.REPEAT;\n        this.state.wrapT = this.gl.REPEAT;\n        this.state.anisotropy = 0;\n    }\n\n    bind() {\n        // Already bound to active texture unit\n        if (this.glState.textureUnits[this.glState.activeTextureUnit] === this.id) return;\n        this.gl.bindTexture(this.target, this.texture);\n        this.glState.textureUnits[this.glState.activeTextureUnit] = this.id;\n    }\n\n    update(textureUnit = 0) {\n        const needsUpdate = !(this.image === this.store.image && !this.needsUpdate);\n\n        // Make sure that texture is bound to its texture unit\n        if (needsUpdate || this.glState.textureUnits[textureUnit] !== this.id) {\n            // set active texture unit to perform texture functions\n            this.gl.renderer.activeTexture(textureUnit);\n            this.bind();\n        }\n\n        if (!needsUpdate) return;\n        this.needsUpdate = false;\n\n        if (this.flipY !== this.glState.flipY) {\n            this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, this.flipY);\n            this.glState.flipY = this.flipY;\n        }\n\n        if (this.premultiplyAlpha !== this.glState.premultiplyAlpha) {\n            this.gl.pixelStorei(this.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.premultiplyAlpha);\n            this.glState.premultiplyAlpha = this.premultiplyAlpha;\n        }\n\n        if (this.unpackAlignment !== this.glState.unpackAlignment) {\n            this.gl.pixelStorei(this.gl.UNPACK_ALIGNMENT, this.unpackAlignment);\n            this.glState.unpackAlignment = this.unpackAlignment;\n        }\n\n        if (this.minFilter !== this.state.minFilter) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_MIN_FILTER, this.minFilter);\n            this.state.minFilter = this.minFilter;\n        }\n\n        if (this.magFilter !== this.state.magFilter) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_MAG_FILTER, this.magFilter);\n            this.state.magFilter = this.magFilter;\n        }\n\n        if (this.wrapS !== this.state.wrapS) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_S, this.wrapS);\n            this.state.wrapS = this.wrapS;\n        }\n\n        if (this.wrapT !== this.state.wrapT) {\n            this.gl.texParameteri(this.target, this.gl.TEXTURE_WRAP_T, this.wrapT);\n            this.state.wrapT = this.wrapT;\n        }\n\n        if (this.anisotropy && this.anisotropy !== this.state.anisotropy) {\n            this.gl.texParameterf(\n                this.target,\n                this.gl.renderer.getExtension('EXT_texture_filter_anisotropic').TEXTURE_MAX_ANISOTROPY_EXT,\n                this.anisotropy\n            );\n            this.state.anisotropy = this.anisotropy;\n        }\n\n        if (this.image) {\n            if (this.image.width) {\n                this.width = this.image.width;\n                this.height = this.image.height;\n            }\n\n            if (this.target === this.gl.TEXTURE_CUBE_MAP) {\n                // For cube maps\n                for (let i = 0; i < 6; i++) {\n                    this.gl.texImage2D(\n                        this.gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\n                        this.level,\n                        this.internalFormat,\n                        this.format,\n                        this.type,\n                        this.image[i]\n                    );\n                }\n            } else if (ArrayBuffer.isView(this.image)) {\n                // Data texture\n                this.gl.texImage2D(this.target, this.level, this.internalFormat, this.width, this.height, 0, this.format, this.type, this.image);\n            } else if (this.image.isCompressedTexture) {\n                // Compressed texture\n                for (let level = 0; level < this.image.length; level++) {\n                    this.gl.compressedTexImage2D(\n                        this.target,\n                        level,\n                        this.internalFormat,\n                        this.image[level].width,\n                        this.image[level].height,\n                        0,\n                        this.image[level].data\n                    );\n                }\n            } else {\n                // Regular texture\n                this.gl.texImage2D(this.target, this.level, this.internalFormat, this.format, this.type, this.image);\n            }\n\n            if (this.generateMipmaps) {\n                // For WebGL1, if not a power of 2, turn off mips, set wrapping to clamp to edge and minFilter to linear\n                if (!this.gl.renderer.isWebgl2 && (!isPowerOf2(this.image.width) || !isPowerOf2(this.image.height))) {\n                    this.generateMipmaps = false;\n                    this.wrapS = this.wrapT = this.gl.CLAMP_TO_EDGE;\n                    this.minFilter = this.gl.LINEAR;\n                } else {\n                    this.gl.generateMipmap(this.target);\n                }\n            }\n\n            // Callback for when data is pushed to GPU\n            this.onUpdate && this.onUpdate();\n        } else {\n            if (this.target === this.gl.TEXTURE_CUBE_MAP) {\n                // Upload empty pixel for each side while no image to avoid errors while image or video loading\n                for (let i = 0; i < 6; i++) {\n                    this.gl.texImage2D(\n                        this.gl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\n                        0,\n                        this.gl.RGBA,\n                        1,\n                        1,\n                        0,\n                        this.gl.RGBA,\n                        this.gl.UNSIGNED_BYTE,\n                        emptyPixel\n                    );\n                }\n            } else if (this.width) {\n                // image intentionally left null for RenderTarget\n                this.gl.texImage2D(this.target, this.level, this.internalFormat, this.width, this.height, 0, this.format, this.type, null);\n            } else {\n                // Upload empty pixel if no image to avoid errors while image or video loading\n                this.gl.texImage2D(this.target, 0, this.gl.RGBA, 1, 1, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, emptyPixel);\n            }\n        }\n        this.store.image = this.image;\n    }\n}\n", "const EPSILON = 0.000001;\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n}\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nexport function set(out, x, y) {\n    out[0] = x;\n    out[1] = y;\n    return out;\n}\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    return out;\n}\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function multiply(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    return out;\n}\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function divide(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    return out;\n}\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nexport function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return Math.sqrt(x * x + y * y);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return x * x + y * y;\n}\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n    var x = a[0],\n        y = a[1];\n    return Math.sqrt(x * x + y * y);\n}\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n    var x = a[0],\n        y = a[1];\n    return x * x + y * y;\n}\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nexport function negate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    return out;\n}\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nexport function inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    return out;\n}\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nexport function normalize(out, a) {\n    var x = a[0],\n        y = a[1];\n    var len = x * x + y * y;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product returns a scalar\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} cross product of a and b\n */\nexport function cross(a, b) {\n    return a[0] * b[1] - a[1] * b[0];\n}\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec2} out\n */\nexport function lerp(out, a, b, t) {\n    var ax = a[0],\n        ay = a[1];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    return out;\n}\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y;\n    out[1] = m[1] * x + m[3] * y;\n    return out;\n}\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2d(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y + m[4];\n    out[1] = m[1] * x + m[3] * y + m[5];\n    return out;\n}\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat3(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[3] * y + m[6];\n    out[1] = m[1] * x + m[4] * y + m[7];\n    return out;\n}\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat4(out, a, m) {\n    let x = a[0];\n    let y = a[1];\n    out[0] = m[0] * x + m[4] * y + m[12];\n    out[1] = m[1] * x + m[5] * y + m[13];\n    return out;\n}\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1];\n}\n", "import * as Vec2Func from './functions/Vec2Func.js';\n\nexport class Vec2 extends Array {\n    constructor(x = 0, y = x) {\n        super(x, y);\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    set x(v) {\n        this[0] = v;\n    }\n\n    set y(v) {\n        this[1] = v;\n    }\n\n    set(x, y = x) {\n        if (x.length) return this.copy(x);\n        Vec2Func.set(this, x, y);\n        return this;\n    }\n\n    copy(v) {\n        Vec2Func.copy(this, v);\n        return this;\n    }\n\n    add(va, vb) {\n        if (vb) Vec2Func.add(this, va, vb);\n        else Vec2Func.add(this, this, va);\n        return this;\n    }\n\n    sub(va, vb) {\n        if (vb) Vec2Func.subtract(this, va, vb);\n        else Vec2Func.subtract(this, this, va);\n        return this;\n    }\n\n    multiply(v) {\n        if (v.length) Vec2Func.multiply(this, this, v);\n        else Vec2Func.scale(this, this, v);\n        return this;\n    }\n\n    divide(v) {\n        if (v.length) Vec2Func.divide(this, this, v);\n        else Vec2Func.scale(this, this, 1 / v);\n        return this;\n    }\n\n    inverse(v = this) {\n        Vec2Func.inverse(this, v);\n        return this;\n    }\n\n    // Can't use 'length' as Array.prototype uses it\n    len() {\n        return Vec2Func.length(this);\n    }\n\n    distance(v) {\n        if (v) return Vec2Func.distance(this, v);\n        else return Vec2Func.length(this);\n    }\n\n    squaredLen() {\n        return this.squaredDistance();\n    }\n\n    squaredDistance(v) {\n        if (v) return Vec2Func.squaredDistance(this, v);\n        else return Vec2Func.squaredLength(this);\n    }\n\n    negate(v = this) {\n        Vec2Func.negate(this, v);\n        return this;\n    }\n\n    cross(va, vb) {\n        if (vb) return Vec2Func.cross(va, vb);\n        return Vec2Func.cross(this, va);\n    }\n\n    scale(v) {\n        Vec2Func.scale(this, this, v);\n        return this;\n    }\n\n    normalize() {\n        Vec2Func.normalize(this, this);\n        return this;\n    }\n\n    dot(v) {\n        return Vec2Func.dot(this, v);\n    }\n\n    equals(v) {\n        return Vec2Func.exactEquals(this, v);\n    }\n\n    applyMatrix3(mat3) {\n        Vec2Func.transformMat3(this, this, mat3);\n        return this;\n    }\n\n    applyMatrix4(mat4) {\n        Vec2Func.transformMat4(this, this, mat4);\n        return this;\n    }\n\n    lerp(v, a) {\n        Vec2Func.lerp(this, this, v, a);\n        return this;\n    }\n\n    clone() {\n        return new Vec2(this[0], this[1]);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        return a;\n    }\n}\n", "import * as Vec4Func from './functions/Vec4Func.js';\n\nexport class Vec4 extends Array {\n    constructor(x = 0, y = x, z = x, w = x) {\n        super(x, y, z, w);\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    get w() {\n        return this[3];\n    }\n\n    set x(v) {\n        this[0] = v;\n    }\n\n    set y(v) {\n        this[1] = v;\n    }\n\n    set z(v) {\n        this[2] = v;\n    }\n\n    set w(v) {\n        this[3] = v;\n    }\n\n    set(x, y = x, z = x, w = x) {\n        if (x.length) return this.copy(x);\n        Vec4Func.set(this, x, y, z, w);\n        return this;\n    }\n\n    copy(v) {\n        Vec4Func.copy(this, v);\n        return this;\n    }\n\n    normalize() {\n        Vec4Func.normalize(this, this);\n        return this;\n    }\n\n    multiply(v) {\n        Vec4Func.scale(this, this, v);\n        return this;\n    }\n\n    dot(v) {\n        return Vec4Func.dot(this, v);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        this[3] = a[o + 3];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        return a;\n    }\n}\n", "import { Geometry } from '../core/Geometry.js';\n\nexport class Plane extends Geometry {\n    constructor(gl, { width = 1, height = 1, widthSegments = 1, heightSegments = 1, attributes = {} } = {}) {\n        const wSegs = widthSegments;\n        const hSegs = heightSegments;\n\n        // Determine length of arrays\n        const num = (wSegs + 1) * (hSegs + 1);\n        const numIndices = wSegs * hSegs * 6;\n\n        // Generate empty arrays once\n        const position = new Float32Array(num * 3);\n        const normal = new Float32Array(num * 3);\n        const uv = new Float32Array(num * 2);\n        const index = numIndices > 65536 ? new Uint32Array(numIndices) : new Uint16Array(numIndices);\n\n        Plane.buildPlane(position, normal, uv, index, width, height, 0, wSegs, hSegs);\n\n        Object.assign(attributes, {\n            position: { size: 3, data: position },\n            normal: { size: 3, data: normal },\n            uv: { size: 2, data: uv },\n            index: { data: index },\n        });\n\n        super(gl, attributes);\n    }\n\n    static buildPlane(position, normal, uv, index, width, height, depth, wSegs, hSegs, u = 0, v = 1, w = 2, uDir = 1, vDir = -1, i = 0, ii = 0) {\n        const io = i;\n        const segW = width / wSegs;\n        const segH = height / hSegs;\n\n        for (let iy = 0; iy <= hSegs; iy++) {\n            let y = iy * segH - height / 2;\n            for (let ix = 0; ix <= wSegs; ix++, i++) {\n                let x = ix * segW - width / 2;\n\n                position[i * 3 + u] = x * uDir;\n                position[i * 3 + v] = y * vDir;\n                position[i * 3 + w] = depth / 2;\n\n                normal[i * 3 + u] = 0;\n                normal[i * 3 + v] = 0;\n                normal[i * 3 + w] = depth >= 0 ? 1 : -1;\n\n                uv[i * 2] = ix / wSegs;\n                uv[i * 2 + 1] = 1 - iy / hSegs;\n\n                if (iy === hSegs || ix === wSegs) continue;\n                let a = io + ix + iy * (wSegs + 1);\n                let b = io + ix + (iy + 1) * (wSegs + 1);\n                let c = io + ix + (iy + 1) * (wSegs + 1) + 1;\n                let d = io + ix + iy * (wSegs + 1) + 1;\n\n                index[ii * 6] = a;\n                index[ii * 6 + 1] = b;\n                index[ii * 6 + 2] = d;\n                index[ii * 6 + 3] = b;\n                index[ii * 6 + 4] = c;\n                index[ii * 6 + 5] = d;\n                ii++;\n            }\n        }\n    }\n}\n", "import { Geometry } from '../core/Geometry.js';\nimport { Plane } from './Plane.js';\n\nexport class Box extends Geometry {\n    constructor(gl, { width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1, attributes = {} } = {}) {\n        const wSegs = widthSegments;\n        const hSegs = heightSegments;\n        const dSegs = depthSegments;\n\n        const num = (wSegs + 1) * (hSegs + 1) * 2 + (wSegs + 1) * (dSegs + 1) * 2 + (hSegs + 1) * (dSegs + 1) * 2;\n        const numIndices = (wSegs * hSegs * 2 + wSegs * dSegs * 2 + hSegs * dSegs * 2) * 6;\n\n        const position = new Float32Array(num * 3);\n        const normal = new Float32Array(num * 3);\n        const uv = new Float32Array(num * 2);\n        const index = num > 65536 ? new Uint32Array(numIndices) : new Uint16Array(numIndices);\n\n        let i = 0;\n        let ii = 0;\n\n        // left, right\n        Plane.buildPlane(position, normal, uv, index, depth, height, width, dSegs, hSegs, 2, 1, 0, -1, -1, i, ii);\n        i += (dSegs + 1) * (hSegs + 1);\n        ii += dSegs * hSegs;\n\n        Plane.buildPlane(position, normal, uv, index, depth, height, -width, dSegs, hSegs, 2, 1, 0, 1, -1, i, ii);\n        i += (dSegs + 1) * (hSegs + 1);\n        ii += dSegs * hSegs;\n\n        // top, bottom\n        Plane.buildPlane(position, normal, uv, index, width, depth, height, dSegs, wSegs, 0, 2, 1, 1, 1, i, ii);\n        i += (wSegs + 1) * (dSegs + 1);\n        ii += wSegs * dSegs;\n\n        Plane.buildPlane(position, normal, uv, index, width, depth, -height, dSegs, wSegs, 0, 2, 1, 1, -1, i, ii);\n        i += (wSegs + 1) * (dSegs + 1);\n        ii += wSegs * dSegs;\n\n        // front, back\n        Plane.buildPlane(position, normal, uv, index, width, height, -depth, wSegs, hSegs, 0, 1, 2, -1, -1, i, ii);\n        i += (wSegs + 1) * (hSegs + 1);\n        ii += wSegs * hSegs;\n\n        Plane.buildPlane(position, normal, uv, index, width, height, depth, wSegs, hSegs, 0, 1, 2, 1, -1, i, ii);\n\n        Object.assign(attributes, {\n            position: { size: 3, data: position },\n            normal: { size: 3, data: normal },\n            uv: { size: 2, data: uv },\n            index: { data: index },\n        });\n\n        super(gl, attributes);\n    }\n}\n", "// Based from ThreeJS' OrbitControls class, rewritten using es6 with some additions and subtractions.\n// TODO: abstract event handlers so can be fed from other sources\n// TODO: make scroll zoom more accurate than just >/< zero\n// TODO: be able to pass in new camera position\n\nimport { Vec3 } from '../math/Vec3.js';\nimport { Vec2 } from '../math/Vec2.js';\n\nconst STATE = { NONE: -1, ROTATE: 0, DOLLY: 1, PAN: 2, DOLLY_PAN: 3 };\nconst tempVec3 = new Vec3();\nconst tempVec2a = new Vec2();\nconst tempVec2b = new Vec2();\n\nexport function Orbit(\n    object,\n    {\n        element = document,\n        enabled = true,\n        target = new Vec3(),\n        ease = 0.25,\n        inertia = 0.85,\n        enableRotate = true,\n        rotateSpeed = 0.1,\n        autoRotate = false,\n        autoRotateSpeed = 1.0,\n        enableZoom = true,\n        zoomSpeed = 1,\n        zoomStyle = 'dolly',\n        enablePan = true,\n        panSpeed = 0.1,\n        minPolarAngle = 0,\n        maxPolarAngle = Math.PI,\n        minAzimuthAngle = -Infinity,\n        maxAzimuthAngle = Infinity,\n        minDistance = 0,\n        maxDistance = Infinity,\n    } = {}\n) {\n    this.enabled = enabled;\n    this.target = target;\n    this.zoomStyle = zoomStyle;\n\n    // Catch attempts to disable - set to 1 so has no effect\n    ease = ease || 1;\n    inertia = inertia || 0;\n\n    this.minDistance = minDistance;\n    this.maxDistance = maxDistance;\n\n    // current position in sphericalTarget coordinates\n    const sphericalDelta = { radius: 1, phi: 0, theta: 0 };\n    const sphericalTarget = { radius: 1, phi: 0, theta: 0 };\n    const spherical = { radius: 1, phi: 0, theta: 0 };\n    const panDelta = new Vec3();\n\n    // Grab initial position values\n    const offset = new Vec3();\n    offset.copy(object.position).sub(this.target);\n    spherical.radius = sphericalTarget.radius = offset.distance();\n    spherical.theta = sphericalTarget.theta = Math.atan2(offset.x, offset.z);\n    spherical.phi = sphericalTarget.phi = Math.acos(Math.min(Math.max(offset.y / sphericalTarget.radius, -1), 1));\n\n    this.offset = offset;\n\n    this.update = () => {\n        if (autoRotate) {\n            handleAutoRotate();\n        }\n\n        // apply delta\n        sphericalTarget.radius *= sphericalDelta.radius;\n        sphericalTarget.theta += sphericalDelta.theta;\n        sphericalTarget.phi += sphericalDelta.phi;\n\n        // apply boundaries\n        sphericalTarget.theta = Math.max(minAzimuthAngle, Math.min(maxAzimuthAngle, sphericalTarget.theta));\n        sphericalTarget.phi = Math.max(minPolarAngle, Math.min(maxPolarAngle, sphericalTarget.phi));\n        sphericalTarget.radius = Math.max(this.minDistance, Math.min(this.maxDistance, sphericalTarget.radius));\n\n        // ease values\n        spherical.phi += (sphericalTarget.phi - spherical.phi) * ease;\n        spherical.theta += (sphericalTarget.theta - spherical.theta) * ease;\n        spherical.radius += (sphericalTarget.radius - spherical.radius) * ease;\n\n        // apply pan to target. As offset is relative to target, it also shifts\n        this.target.add(panDelta);\n\n        // apply rotation to offset\n        let sinPhiRadius = spherical.radius * Math.sin(Math.max(0.000001, spherical.phi));\n        offset.x = sinPhiRadius * Math.sin(spherical.theta);\n        offset.y = spherical.radius * Math.cos(spherical.phi);\n        offset.z = sinPhiRadius * Math.cos(spherical.theta);\n\n        // Apply updated values to object\n        object.position.copy(this.target).add(offset);\n        object.lookAt(this.target);\n\n        // Apply inertia to values\n        sphericalDelta.theta *= inertia;\n        sphericalDelta.phi *= inertia;\n        panDelta.multiply(inertia);\n\n        // Reset scale every frame to avoid applying scale multiple times\n        sphericalDelta.radius = 1;\n    };\n\n    // Updates internals with new position\n    this.forcePosition = () => {\n        offset.copy(object.position).sub(this.target);\n        spherical.radius = sphericalTarget.radius = offset.distance();\n        spherical.theta = sphericalTarget.theta = Math.atan2(offset.x, offset.z);\n        spherical.phi = sphericalTarget.phi = Math.acos(Math.min(Math.max(offset.y / sphericalTarget.radius, -1), 1));\n        object.lookAt(this.target);\n    };\n\n    // Everything below here just updates panDelta and sphericalDelta\n    // Using those two objects' values, the orbit is calculated\n\n    const rotateStart = new Vec2();\n    const panStart = new Vec2();\n    const dollyStart = new Vec2();\n\n    let state = STATE.NONE;\n    this.mouseButtons = { ORBIT: 0, ZOOM: 1, PAN: 2 };\n\n    function getZoomScale() {\n        return Math.pow(0.95, zoomSpeed);\n    }\n\n    function panLeft(distance, m) {\n        tempVec3.set(m[0], m[1], m[2]);\n        tempVec3.multiply(-distance);\n        panDelta.add(tempVec3);\n    }\n\n    function panUp(distance, m) {\n        tempVec3.set(m[4], m[5], m[6]);\n        tempVec3.multiply(distance);\n        panDelta.add(tempVec3);\n    }\n\n    const pan = (deltaX, deltaY) => {\n        let el = element === document ? document.body : element;\n        tempVec3.copy(object.position).sub(this.target);\n        let targetDistance = tempVec3.distance();\n        targetDistance *= Math.tan((((object.fov || 45) / 2) * Math.PI) / 180.0);\n        panLeft((2 * deltaX * targetDistance) / el.clientHeight, object.matrix);\n        panUp((2 * deltaY * targetDistance) / el.clientHeight, object.matrix);\n    };\n\n    const dolly = (dollyScale) => {\n        if (this.zoomStyle === 'dolly') sphericalDelta.radius /= dollyScale;\n        else {\n            object.fov /= dollyScale;\n            if (object.type === 'orthographic') object.orthographic();\n            else object.perspective();\n        }\n    };\n\n    function handleAutoRotate() {\n        const angle = ((2 * Math.PI) / 60 / 60) * autoRotateSpeed;\n        sphericalDelta.theta -= angle;\n    }\n\n    function handleMoveRotate(x, y) {\n        tempVec2a.set(x, y);\n        tempVec2b.sub(tempVec2a, rotateStart).multiply(rotateSpeed);\n        let el = element === document ? document.body : element;\n        sphericalDelta.theta -= (2 * Math.PI * tempVec2b.x) / el.clientHeight;\n        sphericalDelta.phi -= (2 * Math.PI * tempVec2b.y) / el.clientHeight;\n        rotateStart.copy(tempVec2a);\n    }\n\n    function handleMouseMoveDolly(e) {\n        tempVec2a.set(e.clientX, e.clientY);\n        tempVec2b.sub(tempVec2a, dollyStart);\n        if (tempVec2b.y > 0) {\n            dolly(getZoomScale());\n        } else if (tempVec2b.y < 0) {\n            dolly(1 / getZoomScale());\n        }\n        dollyStart.copy(tempVec2a);\n    }\n\n    function handleMovePan(x, y) {\n        tempVec2a.set(x, y);\n        tempVec2b.sub(tempVec2a, panStart).multiply(panSpeed);\n        pan(tempVec2b.x, tempVec2b.y);\n        panStart.copy(tempVec2a);\n    }\n\n    function handleTouchStartDollyPan(e) {\n        if (enableZoom) {\n            let dx = e.touches[0].pageX - e.touches[1].pageX;\n            let dy = e.touches[0].pageY - e.touches[1].pageY;\n            let distance = Math.sqrt(dx * dx + dy * dy);\n            dollyStart.set(0, distance);\n        }\n\n        if (enablePan) {\n            let x = 0.5 * (e.touches[0].pageX + e.touches[1].pageX);\n            let y = 0.5 * (e.touches[0].pageY + e.touches[1].pageY);\n            panStart.set(x, y);\n        }\n    }\n\n    function handleTouchMoveDollyPan(e) {\n        if (enableZoom) {\n            let dx = e.touches[0].pageX - e.touches[1].pageX;\n            let dy = e.touches[0].pageY - e.touches[1].pageY;\n            let distance = Math.sqrt(dx * dx + dy * dy);\n            tempVec2a.set(0, distance);\n            tempVec2b.set(0, Math.pow(tempVec2a.y / dollyStart.y, zoomSpeed));\n            dolly(tempVec2b.y);\n            dollyStart.copy(tempVec2a);\n        }\n\n        if (enablePan) {\n            let x = 0.5 * (e.touches[0].pageX + e.touches[1].pageX);\n            let y = 0.5 * (e.touches[0].pageY + e.touches[1].pageY);\n            handleMovePan(x, y);\n        }\n    }\n\n    const onMouseDown = (e) => {\n        if (!this.enabled) return;\n\n        switch (e.button) {\n            case this.mouseButtons.ORBIT:\n                if (enableRotate === false) return;\n                rotateStart.set(e.clientX, e.clientY);\n                state = STATE.ROTATE;\n                break;\n            case this.mouseButtons.ZOOM:\n                if (enableZoom === false) return;\n                dollyStart.set(e.clientX, e.clientY);\n                state = STATE.DOLLY;\n                break;\n            case this.mouseButtons.PAN:\n                if (enablePan === false) return;\n                panStart.set(e.clientX, e.clientY);\n                state = STATE.PAN;\n                break;\n        }\n\n        if (state !== STATE.NONE) {\n            window.addEventListener('mousemove', onMouseMove, false);\n            window.addEventListener('mouseup', onMouseUp, false);\n        }\n    };\n\n    const onMouseMove = (e) => {\n        if (!this.enabled) return;\n\n        switch (state) {\n            case STATE.ROTATE:\n                if (enableRotate === false) return;\n                handleMoveRotate(e.clientX, e.clientY);\n                break;\n            case STATE.DOLLY:\n                if (enableZoom === false) return;\n                handleMouseMoveDolly(e);\n                break;\n            case STATE.PAN:\n                if (enablePan === false) return;\n                handleMovePan(e.clientX, e.clientY);\n                break;\n        }\n    };\n\n    const onMouseUp = () => {\n        window.removeEventListener('mousemove', onMouseMove, false);\n        window.removeEventListener('mouseup', onMouseUp, false);\n        state = STATE.NONE;\n    };\n\n    const onMouseWheel = (e) => {\n        if (!this.enabled || !enableZoom || (state !== STATE.NONE && state !== STATE.ROTATE)) return;\n        e.stopPropagation();\n        e.preventDefault();\n\n        if (e.deltaY < 0) {\n            dolly(1 / getZoomScale());\n        } else if (e.deltaY > 0) {\n            dolly(getZoomScale());\n        }\n    };\n\n    const onTouchStart = (e) => {\n        if (!this.enabled) return;\n        e.preventDefault();\n\n        switch (e.touches.length) {\n            case 1:\n                if (enableRotate === false) return;\n                rotateStart.set(e.touches[0].pageX, e.touches[0].pageY);\n                state = STATE.ROTATE;\n                break;\n            case 2:\n                if (enableZoom === false && enablePan === false) return;\n                handleTouchStartDollyPan(e);\n                state = STATE.DOLLY_PAN;\n                break;\n            default:\n                state = STATE.NONE;\n        }\n    };\n\n    const onTouchMove = (e) => {\n        if (!this.enabled) return;\n        e.preventDefault();\n        e.stopPropagation();\n\n        switch (e.touches.length) {\n            case 1:\n                if (enableRotate === false) return;\n                handleMoveRotate(e.touches[0].pageX, e.touches[0].pageY);\n                break;\n            case 2:\n                if (enableZoom === false && enablePan === false) return;\n                handleTouchMoveDollyPan(e);\n                break;\n            default:\n                state = STATE.NONE;\n        }\n    };\n\n    const onTouchEnd = () => {\n        if (!this.enabled) return;\n        state = STATE.NONE;\n    };\n\n    const onContextMenu = (e) => {\n        if (!this.enabled) return;\n        e.preventDefault();\n    };\n\n    function addHandlers() {\n        element.addEventListener('contextmenu', onContextMenu, false);\n        element.addEventListener('mousedown', onMouseDown, false);\n        element.addEventListener('wheel', onMouseWheel, { passive: false });\n        element.addEventListener('touchstart', onTouchStart, { passive: false });\n        element.addEventListener('touchend', onTouchEnd, false);\n        element.addEventListener('touchmove', onTouchMove, { passive: false });\n    }\n\n    this.remove = function () {\n        element.removeEventListener('contextmenu', onContextMenu);\n        element.removeEventListener('mousedown', onMouseDown);\n        element.removeEventListener('wheel', onMouseWheel);\n        element.removeEventListener('touchstart', onTouchStart);\n        element.removeEventListener('touchend', onTouchEnd);\n        element.removeEventListener('touchmove', onTouchMove);\n        window.removeEventListener('mousemove', onMouseMove);\n        window.removeEventListener('mouseup', onMouseUp);\n    };\n\n    addHandlers();\n}\n", "// TODO: barycentric code shouldn't be here, but where?\n// TODO: SphereCast?\n\nimport { Vec2 } from '../math/Vec2.js';\nimport { Vec3 } from '../math/Vec3.js';\nimport { Mat4 } from '../math/Mat4.js';\n\nconst tempVec2a = new Vec2();\nconst tempVec2b = new Vec2();\nconst tempVec2c = new Vec2();\n\nconst tempVec3a = new Vec3();\nconst tempVec3b = new Vec3();\nconst tempVec3c = new Vec3();\nconst tempVec3d = new Vec3();\nconst tempVec3e = new Vec3();\nconst tempVec3f = new Vec3();\nconst tempVec3g = new Vec3();\nconst tempVec3h = new Vec3();\nconst tempVec3i = new Vec3();\nconst tempVec3j = new Vec3();\nconst tempVec3k = new Vec3();\n\nconst tempMat4 = new Mat4();\n\nexport class Raycast {\n    constructor() {\n        this.origin = new Vec3();\n        this.direction = new Vec3();\n    }\n\n    // Set ray from mouse unprojection\n    castMouse(camera, mouse = [0, 0]) {\n        if (camera.type === 'orthographic') {\n            // Set origin\n            // Since camera is orthographic, origin is not the camera position\n            const { left, right, bottom, top, zoom } = camera;\n            const x = left / zoom + ((right - left) / zoom) * (mouse[0] * 0.5 + 0.5);\n            const y = bottom / zoom + ((top - bottom) / zoom) * (mouse[1] * 0.5 + 0.5);\n            this.origin.set(x, y, 0);\n            this.origin.applyMatrix4(camera.worldMatrix);\n\n            // Set direction\n            // https://community.khronos.org/t/get-direction-from-transformation-matrix-or-quat/65502/2\n            this.direction.x = -camera.worldMatrix[8];\n            this.direction.y = -camera.worldMatrix[9];\n            this.direction.z = -camera.worldMatrix[10];\n        } else {\n            // Set origin\n            camera.worldMatrix.getTranslation(this.origin);\n\n            // Set direction\n            this.direction.set(mouse[0], mouse[1], 0.5);\n            camera.unproject(this.direction);\n            this.direction.sub(this.origin).normalize();\n        }\n    }\n\n    intersectBounds(meshes, { maxDistance, output = [] } = {}) {\n        if (!Array.isArray(meshes)) meshes = [meshes];\n\n        const invWorldMat4 = tempMat4;\n        const origin = tempVec3a;\n        const direction = tempVec3b;\n\n        const hits = output;\n        hits.length = 0;\n\n        meshes.forEach((mesh) => {\n            // Create bounds\n            if (!mesh.geometry.bounds || mesh.geometry.bounds.radius === Infinity) mesh.geometry.computeBoundingSphere();\n            const bounds = mesh.geometry.bounds;\n            invWorldMat4.inverse(mesh.worldMatrix);\n\n            // Get max distance locally\n            let localMaxDistance;\n            if (maxDistance) {\n                direction.copy(this.direction).scaleRotateMatrix4(invWorldMat4);\n                localMaxDistance = maxDistance * direction.len();\n            }\n\n            // Take world space ray and make it object space to align with bounding box\n            origin.copy(this.origin).applyMatrix4(invWorldMat4);\n            direction.copy(this.direction).transformDirection(invWorldMat4);\n\n            // Break out early if bounds too far away from origin\n            if (maxDistance) {\n                if (origin.distance(bounds.center) - bounds.radius > localMaxDistance) return;\n            }\n\n            let localDistance = 0;\n\n            // Check origin isn't inside bounds before testing intersection\n            if (mesh.geometry.raycast === 'sphere') {\n                if (origin.distance(bounds.center) > bounds.radius) {\n                    localDistance = this.intersectSphere(bounds, origin, direction);\n                    if (!localDistance) return;\n                }\n            } else {\n                if (\n                    origin.x < bounds.min.x ||\n                    origin.x > bounds.max.x ||\n                    origin.y < bounds.min.y ||\n                    origin.y > bounds.max.y ||\n                    origin.z < bounds.min.z ||\n                    origin.z > bounds.max.z\n                ) {\n                    localDistance = this.intersectBox(bounds, origin, direction);\n                    if (!localDistance) return;\n                }\n            }\n\n            if (maxDistance && localDistance > localMaxDistance) return;\n\n            // Create object on mesh to avoid generating lots of objects\n            if (!mesh.hit) mesh.hit = { localPoint: new Vec3(), point: new Vec3() };\n\n            mesh.hit.localPoint.copy(direction).multiply(localDistance).add(origin);\n            mesh.hit.point.copy(mesh.hit.localPoint).applyMatrix4(mesh.worldMatrix);\n            mesh.hit.distance = mesh.hit.point.distance(this.origin);\n\n            hits.push(mesh);\n        });\n\n        hits.sort((a, b) => a.hit.distance - b.hit.distance);\n        return hits;\n    }\n\n    intersectMeshes(meshes, { cullFace = true, maxDistance, includeUV = true, includeNormal = true, output = [] } = {}) {\n        // Test bounds first before testing geometry\n        const hits = this.intersectBounds(meshes, { maxDistance, output });\n        if (!hits.length) return hits;\n\n        const invWorldMat4 = tempMat4;\n        const origin = tempVec3a;\n        const direction = tempVec3b;\n        const a = tempVec3c;\n        const b = tempVec3d;\n        const c = tempVec3e;\n        const closestFaceNormal = tempVec3f;\n        const faceNormal = tempVec3g;\n        const barycoord = tempVec3h;\n        const uvA = tempVec2a;\n        const uvB = tempVec2b;\n        const uvC = tempVec2c;\n\n        for (let i = hits.length - 1; i >= 0; i--) {\n            const mesh = hits[i];\n            invWorldMat4.inverse(mesh.worldMatrix);\n\n            // Get max distance locally\n            let localMaxDistance;\n            if (maxDistance) {\n                direction.copy(this.direction).scaleRotateMatrix4(invWorldMat4);\n                localMaxDistance = maxDistance * direction.len();\n            }\n\n            // Take world space ray and make it object space to align with bounding box\n            origin.copy(this.origin).applyMatrix4(invWorldMat4);\n            direction.copy(this.direction).transformDirection(invWorldMat4);\n\n            let localDistance = 0;\n            let closestA, closestB, closestC;\n\n            const geometry = mesh.geometry;\n            const attributes = geometry.attributes;\n            const index = attributes.index;\n            const position = attributes.position;\n\n            const start = Math.max(0, geometry.drawRange.start);\n            const end = Math.min(index ? index.count : position.count, geometry.drawRange.start + geometry.drawRange.count);\n            // Data loaded shouldn't haave stride, only buffers\n            // const stride = position.stride ? position.stride / position.data.BYTES_PER_ELEMENT : position.size;\n            const stride = position.size;\n\n            for (let j = start; j < end; j += 3) {\n                // Position attribute indices for each triangle\n                const ai = index ? index.data[j] : j;\n                const bi = index ? index.data[j + 1] : j + 1;\n                const ci = index ? index.data[j + 2] : j + 2;\n\n                a.fromArray(position.data, ai * stride);\n                b.fromArray(position.data, bi * stride);\n                c.fromArray(position.data, ci * stride);\n\n                const distance = this.intersectTriangle(a, b, c, cullFace, origin, direction, faceNormal);\n                if (!distance) continue;\n\n                // Too far away\n                if (maxDistance && distance > localMaxDistance) continue;\n\n                if (!localDistance || distance < localDistance) {\n                    localDistance = distance;\n                    closestA = ai;\n                    closestB = bi;\n                    closestC = ci;\n                    closestFaceNormal.copy(faceNormal);\n                }\n            }\n\n            if (!localDistance) hits.splice(i, 1);\n\n            // Update hit values from bounds-test\n            mesh.hit.localPoint.copy(direction).multiply(localDistance).add(origin);\n            mesh.hit.point.copy(mesh.hit.localPoint).applyMatrix4(mesh.worldMatrix);\n            mesh.hit.distance = mesh.hit.point.distance(this.origin);\n\n            // Add unique hit objects on mesh to avoid generating lots of objects\n            if (!mesh.hit.faceNormal) {\n                mesh.hit.localFaceNormal = new Vec3();\n                mesh.hit.faceNormal = new Vec3();\n                mesh.hit.uv = new Vec2();\n                mesh.hit.localNormal = new Vec3();\n                mesh.hit.normal = new Vec3();\n            }\n\n            // Add face normal data which is already computed\n            mesh.hit.localFaceNormal.copy(closestFaceNormal);\n            mesh.hit.faceNormal.copy(mesh.hit.localFaceNormal).transformDirection(mesh.worldMatrix);\n\n            // Optional data, opt out to optimise a bit if necessary\n            if (includeUV || includeNormal) {\n                // Calculate barycoords to find uv values at hit point\n                a.fromArray(position.data, closestA * 3);\n                b.fromArray(position.data, closestB * 3);\n                c.fromArray(position.data, closestC * 3);\n                this.getBarycoord(mesh.hit.localPoint, a, b, c, barycoord);\n            }\n\n            if (includeUV && attributes.uv) {\n                uvA.fromArray(attributes.uv.data, closestA * 2);\n                uvB.fromArray(attributes.uv.data, closestB * 2);\n                uvC.fromArray(attributes.uv.data, closestC * 2);\n                mesh.hit.uv.set(\n                    uvA.x * barycoord.x + uvB.x * barycoord.y + uvC.x * barycoord.z,\n                    uvA.y * barycoord.x + uvB.y * barycoord.y + uvC.y * barycoord.z\n                );\n            }\n\n            if (includeNormal && attributes.normal) {\n                a.fromArray(attributes.normal.data, closestA * 3);\n                b.fromArray(attributes.normal.data, closestB * 3);\n                c.fromArray(attributes.normal.data, closestC * 3);\n                mesh.hit.localNormal.set(\n                    a.x * barycoord.x + b.x * barycoord.y + c.x * barycoord.z,\n                    a.y * barycoord.x + b.y * barycoord.y + c.y * barycoord.z,\n                    a.z * barycoord.x + b.z * barycoord.y + c.z * barycoord.z\n                );\n\n                mesh.hit.normal.copy(mesh.hit.localNormal).transformDirection(mesh.worldMatrix);\n            }\n        }\n\n        hits.sort((a, b) => a.hit.distance - b.hit.distance);\n        return hits;\n    }\n\n    intersectPlane(plane, origin = this.origin, direction = this.direction) {\n        const xminp = tempVec3a;\n        xminp.sub(plane.origin, origin);\n\n        const a = xminp.dot(plane.normal);\n        const b = direction.dot(plane.normal);\n        // Assuming we don't want to count a ray parallel to the plane as intersecting\n        if (b == 0) return 0;\n        const delta = a / b;\n        if (delta <= 0) return 0;\n        return origin.add(direction.scale(delta));\n    }\n\n    intersectSphere(sphere, origin = this.origin, direction = this.direction) {\n        const ray = tempVec3c;\n        ray.sub(sphere.center, origin);\n        const tca = ray.dot(direction);\n        const d2 = ray.dot(ray) - tca * tca;\n        const radius2 = sphere.radius * sphere.radius;\n        if (d2 > radius2) return 0;\n        const thc = Math.sqrt(radius2 - d2);\n        const t0 = tca - thc;\n        const t1 = tca + thc;\n        if (t0 < 0 && t1 < 0) return 0;\n        if (t0 < 0) return t1;\n        return t0;\n    }\n\n    // Ray AABB - Ray Axis aligned bounding box testing\n    intersectBox(box, origin = this.origin, direction = this.direction) {\n        let tmin, tmax, tYmin, tYmax, tZmin, tZmax;\n        const invdirx = 1 / direction.x;\n        const invdiry = 1 / direction.y;\n        const invdirz = 1 / direction.z;\n        const min = box.min;\n        const max = box.max;\n        tmin = ((invdirx >= 0 ? min.x : max.x) - origin.x) * invdirx;\n        tmax = ((invdirx >= 0 ? max.x : min.x) - origin.x) * invdirx;\n        tYmin = ((invdiry >= 0 ? min.y : max.y) - origin.y) * invdiry;\n        tYmax = ((invdiry >= 0 ? max.y : min.y) - origin.y) * invdiry;\n        if (tmin > tYmax || tYmin > tmax) return 0;\n        if (tYmin > tmin) tmin = tYmin;\n        if (tYmax < tmax) tmax = tYmax;\n        tZmin = ((invdirz >= 0 ? min.z : max.z) - origin.z) * invdirz;\n        tZmax = ((invdirz >= 0 ? max.z : min.z) - origin.z) * invdirz;\n        if (tmin > tZmax || tZmin > tmax) return 0;\n        if (tZmin > tmin) tmin = tZmin;\n        if (tZmax < tmax) tmax = tZmax;\n        if (tmax < 0) return 0;\n        return tmin >= 0 ? tmin : tmax;\n    }\n\n    intersectTriangle(a, b, c, backfaceCulling = true, origin = this.origin, direction = this.direction, normal = tempVec3g) {\n        // from https://github.com/mrdoob/three.js/blob/master/src/math/Ray.js\n        // which is from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n        const edge1 = tempVec3h;\n        const edge2 = tempVec3i;\n        const diff = tempVec3j;\n        edge1.sub(b, a);\n        edge2.sub(c, a);\n        normal.cross(edge1, edge2);\n        let DdN = direction.dot(normal);\n        if (!DdN) return 0;\n        let sign;\n        if (DdN > 0) {\n            if (backfaceCulling) return 0;\n            sign = 1;\n        } else {\n            sign = -1;\n            DdN = -DdN;\n        }\n        diff.sub(origin, a);\n        let DdQxE2 = sign * direction.dot(edge2.cross(diff, edge2));\n        if (DdQxE2 < 0) return 0;\n        let DdE1xQ = sign * direction.dot(edge1.cross(diff));\n        if (DdE1xQ < 0) return 0;\n        if (DdQxE2 + DdE1xQ > DdN) return 0;\n        let QdN = -sign * diff.dot(normal);\n        if (QdN < 0) return 0;\n        return QdN / DdN;\n    }\n\n    getBarycoord(point, a, b, c, target = tempVec3h) {\n        // From https://github.com/mrdoob/three.js/blob/master/src/math/Triangle.js\n        // static/instance method to calculate barycentric coordinates\n        // based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n        const v0 = tempVec3i;\n        const v1 = tempVec3j;\n        const v2 = tempVec3k;\n        v0.sub(c, a);\n        v1.sub(b, a);\n        v2.sub(point, a);\n        const dot00 = v0.dot(v0);\n        const dot01 = v0.dot(v1);\n        const dot02 = v0.dot(v2);\n        const dot11 = v1.dot(v1);\n        const dot12 = v1.dot(v2);\n        const denom = dot00 * dot11 - dot01 * dot01;\n        if (denom === 0) return target.set(-2, -1, -1);\n        const invDenom = 1 / denom;\n        const u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n        const v = (dot00 * dot12 - dot01 * dot02) * invDenom;\n        return target.set(1 - u - v, v, u);\n    }\n}\n", "import { Program } from '../core/Program.js';\n\nconst vertex = /* glsl */ `\n    precision highp float;\n    precision highp int;\n\n    attribute vec3 position;\n    attribute vec3 normal;\n\n    uniform mat3 normalMatrix;\n    uniform mat4 modelViewMatrix;\n    uniform mat4 projectionMatrix;\n\n    varying vec3 vNormal;\n\n    void main() {\n        vNormal = normalize(normalMatrix * normal);\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n`;\n\nconst fragment = /* glsl */ `\n    precision highp float;\n    precision highp int;\n\n    varying vec3 vNormal;\n\n    void main() {\n        gl_FragColor.rgb = normalize(vNormal);\n        gl_FragColor.a = 1.0;\n    }\n`;\n\nexport function NormalProgram(gl) {\n    return new Program(gl, {\n        vertex: vertex,\n        fragment: fragment,\n        cullFace: null,\n    });\n}\n", "import { Vec3 } from '../math/Vec3.js';\nimport { Quat } from '../math/Quat.js';\n\nconst tmpVec3A = new Vec3();\nconst tmpVec3B = new Vec3();\nconst tmpVec3C = new Vec3();\nconst tmpVec3D = new Vec3();\n\nconst tmpQuatA = new Quat();\nconst tmpQuatB = new Quat();\nconst tmpQuatC = new Quat();\nconst tmpQuatD = new Quat();\n\nexport class GLTFAnimation {\n    constructor(data, weight = 1) {\n        this.data = data;\n        this.elapsed = 0;\n        this.weight = weight;\n\n        // Set to false to not apply modulo to elapsed against duration\n        this.loop = true;\n\n        // Find starting time as exports from blender (perhaps others too) don't always start from 0\n        this.startTime = data.reduce((a, { times }) => Math.min(a, times[0]), Infinity);\n        // Get largest final time in all channels to calculate duration\n        this.endTime = data.reduce((a, { times }) => Math.max(a, times[times.length - 1]), 0);\n        this.duration = this.endTime - this.startTime;\n    }\n\n    update(totalWeight = 1, isSet) {\n        const weight = isSet ? 1 : this.weight / totalWeight;\n        const elapsed = !this.duration\n            ? 0\n            : (this.loop ? this.elapsed % this.duration : Math.min(this.elapsed, this.duration - 0.001)) + this.startTime;\n\n        this.data.forEach(({ node, transform, interpolation, times, values }) => {\n            if (!this.duration) {\n                let val = tmpVec3A;\n                let size = 3;\n                if (transform === 'quaternion') {\n                    val = tmpQuatA;\n                    size = 4;\n                }\n                val.fromArray(values, 0);\n                if (size === 4) node[transform].slerp(val, weight);\n                else node[transform].lerp(val, weight);\n                return;\n            }\n\n            // Get index of two time values elapsed is between\n            const prevIndex =\n                Math.max(\n                    1,\n                    times.findIndex((t) => t > elapsed)\n                ) - 1;\n            const nextIndex = prevIndex + 1;\n\n            // Get linear blend/alpha between the two\n            let alpha = (elapsed - times[prevIndex]) / (times[nextIndex] - times[prevIndex]);\n            if (interpolation === 'STEP') alpha = 0;\n\n            let prevVal = tmpVec3A;\n            let prevTan = tmpVec3B;\n            let nextTan = tmpVec3C;\n            let nextVal = tmpVec3D;\n            let size = 3;\n\n            if (transform === 'quaternion') {\n                prevVal = tmpQuatA;\n                prevTan = tmpQuatB;\n                nextTan = tmpQuatC;\n                nextVal = tmpQuatD;\n                size = 4;\n            }\n\n            if (interpolation === 'CUBICSPLINE') {\n                // Get the prev and next values from the indices\n                prevVal.fromArray(values, prevIndex * size * 3 + size * 1);\n                prevTan.fromArray(values, prevIndex * size * 3 + size * 2);\n                nextTan.fromArray(values, nextIndex * size * 3 + size * 0);\n                nextVal.fromArray(values, nextIndex * size * 3 + size * 1);\n\n                // interpolate for final value\n                prevVal = this.cubicSplineInterpolate(alpha, prevVal, prevTan, nextTan, nextVal);\n                if (size === 4) prevVal.normalize();\n            } else {\n                // Get the prev and next values from the indices\n                prevVal.fromArray(values, prevIndex * size);\n                nextVal.fromArray(values, nextIndex * size);\n\n                // interpolate for final value\n                if (size === 4) prevVal.slerp(nextVal, alpha);\n                else prevVal.lerp(nextVal, alpha);\n            }\n\n            // interpolate between multiple possible animations\n            if (size === 4) node[transform].slerp(prevVal, weight);\n            else node[transform].lerp(prevVal, weight);\n        });\n    }\n\n    cubicSplineInterpolate(t, prevVal, prevTan, nextTan, nextVal) {\n        const t2 = t * t;\n        const t3 = t2 * t;\n\n        const s2 = 3 * t2 - 2 * t3;\n        const s3 = t3 - t2;\n        const s0 = 1 - s2;\n        const s1 = s3 - t2 + t;\n\n        for (let i = 0; i < prevVal.length; i++) {\n            prevVal[i] = s0 * prevVal[i] + s1 * (1 - t) * prevTan[i] + s2 * nextVal[i] + s3 * t * nextTan[i];\n        }\n\n        return prevVal;\n    }\n}\n", "import { Mesh } from '../core/Mesh.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Texture } from '../core/Texture.js';\n\nconst tempMat4 = new Mat4();\nconst identity = new Mat4();\n\nexport class GLTFSkin extends Mesh {\n    constructor(gl, { skeleton, geometry, program, mode = gl.TRIANGLES } = {}) {\n        super(gl, { geometry, program, mode });\n        this.skeleton = skeleton;\n        this.program = program;\n        this.createBoneTexture();\n        // this.animations = [];\n    }\n\n    createBoneTexture() {\n        if (!this.skeleton.joints.length) return;\n        const size = Math.max(4, Math.pow(2, Math.ceil(Math.log(Math.sqrt(this.skeleton.joints.length * 4)) / Math.LN2)));\n        this.boneMatrices = new Float32Array(size * size * 4);\n        this.boneTextureSize = size;\n        this.boneTexture = new Texture(this.gl, {\n            image: this.boneMatrices,\n            generateMipmaps: false,\n            type: this.gl.FLOAT,\n            internalFormat: this.gl.renderer.isWebgl2 ? this.gl.RGBA32F : this.gl.RGBA,\n            minFilter: this.gl.NEAREST,\n            magFilter: this.gl.NEAREST,\n            flipY: false,\n            width: size,\n        });\n    }\n\n    // addAnimation(data) {\n    //     const animation = new Animation({ objects: this.bones, data });\n    //     this.animations.push(animation);\n    //     return animation;\n    // }\n\n    // updateAnimations() {\n    //     // Calculate combined animation weight\n    //     let total = 0;\n    //     this.animations.forEach((animation) => (total += animation.weight));\n\n    //     this.animations.forEach((animation, i) => {\n    //         // force first animation to set in order to reset frame\n    //         animation.update(total, i === 0);\n    //     });\n    // }\n\n    updateUniforms() {\n        // Update bone texture\n        this.skeleton.joints.forEach((bone, i) => {\n            // Find difference between current and bind pose\n            tempMat4.multiply(bone.worldMatrix, bone.bindInverse);\n            this.boneMatrices.set(tempMat4, i * 16);\n        });\n        if (this.boneTexture) this.boneTexture.needsUpdate = true;\n    }\n\n    draw({ camera } = {}) {\n        if (!this.program.uniforms.boneTexture) {\n            Object.assign(this.program.uniforms, {\n                boneTexture: { value: this.boneTexture },\n                boneTextureSize: { value: this.boneTextureSize },\n            });\n        }\n\n        this.updateUniforms();\n\n        // Switch the world matrix with identity to ignore any transforms\n        // on the mesh itself - only use skeleton's transforms\n        const _worldMatrix = this.worldMatrix;\n        this.worldMatrix = identity;\n\n        super.draw({ camera });\n\n        // Switch back to leave identity untouched\n        this.worldMatrix = _worldMatrix;\n    }\n}\n", "import { Transform } from '../core/Transform.js';\nimport { Mesh } from '../core/Mesh.js';\nimport { Vec4 } from '../math/Vec4.js';\n\nexport class InstancedMesh extends Mesh {\n    constructor(...args) {\n        super(...args);\n\n        // Skip renderer frustum culling\n        this.frustumCulled = false;\n        this.isInstancedMesh = true;\n    }\n\n    addFrustumCull() {\n        this.instanceTransforms = null;\n        this.instanceLightmapScaleOffset = null;\n        this.totalInstanceCount = 0;\n        this.frustumCullFunction = null;\n        this.instanceRenderList = null;\n\n        // Get instanced mesh\n        if (!this.geometry.attributes.instanceMatrix)\n            console.error(`mesh ${this.name ? `\"${this.name}\" ` : ``}missing instanceMatrix attribute; unable to frustum cull`);\n\n        // Make list of transforms from instanceMatrix\n        const matrixData = this.geometry.attributes.instanceMatrix.data;\n        this.instanceTransforms = [];\n        for (let i = 0, j = 0; i < matrixData.length; i += 16, j++) {\n            const transform = new Transform();\n            transform.index = j;\n            transform.matrix.fromArray(matrixData, i);\n            transform.decompose();\n            this.instanceTransforms.push(transform);\n            // Add transforms to parent to update world matrices\n            transform.setParent(this.parent);\n        }\n        this.totalInstanceCount = this.instanceTransforms.length;\n\n        // Check for lightmap attributes - attach to transform\n        if (!!this.geometry.attributes.lightmapScaleOffset) {\n            const lightmapData = this.geometry.attributes.lightmapScaleOffset.data;\n            for (let i = 0, j = 0; i < lightmapData.length; i += 4, j++) {\n                this.instanceTransforms[j].lightmapData = new Vec4().fromArray(lightmapData, i);\n            }\n        }\n\n        this.frustumCullFunction = ({ camera }) => {\n            // frustum cull transforms each frame - pass world matrix\n            this.instanceRenderList = [];\n            this.instanceTransforms.forEach((transform) => {\n                if (!camera.frustumIntersectsMesh(this, transform.worldMatrix)) return;\n                this.instanceRenderList.push(transform);\n            });\n\n            // update instanceMatrix and instancedCount with visible\n            this.instanceRenderList.forEach((transform, i) => {\n                transform.matrix.toArray(this.geometry.attributes.instanceMatrix.data, i * 16);\n                \n                // Update lightmap attr\n                if (transform.lightmapData) {\n                    transform.lightmapData.toArray(this.geometry.attributes.lightmapScaleOffset.data, i * 4);\n                    this.geometry.attributes.lightmapScaleOffset.needsUpdate = true;\n                }\n            });\n            this.geometry.instancedCount = this.instanceRenderList.length;\n            this.geometry.attributes.instanceMatrix.needsUpdate = true;\n        };\n\n        this.onBeforeRender(this.frustumCullFunction);\n    }\n\n    removeFrustumCull() {\n        this.offBeforeRender(this.frustumCullFunction);\n        this.geometry.instancedCount = this.totalInstanceCount;\n        this.instanceTransforms.forEach((transform, i) => {\n            transform.matrix.toArray(this.geometry.attributes.instanceMatrix.data, i * 16);\n\n            // Update lightmap attr\n            if (transform.lightmapData) {\n                transform.lightmapData.toArray(this.geometry.attributes.lightmapScaleOffset.data, i * 4);\n                this.geometry.attributes.lightmapScaleOffset.needsUpdate = true;\n            }\n        });\n        this.geometry.attributes.instanceMatrix.needsUpdate = true;\n    }\n}\n", "import { Geometry } from '../core/Geometry.js';\nimport { Transform } from '../core/Transform.js';\nimport { Texture } from '../core/Texture.js';\nimport { Mesh } from '../core/Mesh.js';\nimport { GLTFAnimation } from './GLTFAnimation.js';\nimport { GLTFSkin } from './GLTFSkin.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Vec3 } from '../math/Vec3.js';\nimport { NormalProgram } from './NormalProgram.js';\nimport { InstancedMesh } from './InstancedMesh.js';\n\n// Supports\n// [x] glb\n// [x] Geometry\n// [x] Nodes and Hierarchy\n// [x] Instancing\n// [x] Skins\n// [x] Textures\n// [x] Animation\n// [x] GLB support\n// [x] Basis/ktx2\n// [x] KHR_lights_punctual lights\n// [ ] Morph Targets\n// [ ] Materials\n// [ ] Cameras\n\n// TODO: Sparse accessor packing? For morph targets basically\n// TODO: init accessor missing bufferView with 0s\n// TODO: morph target animations\n// TODO: option to turn off GPU instancing\n\nconst TYPE_ARRAY = {\n    5121: Uint8Array,\n    5122: Int16Array,\n    5123: Uint16Array,\n    5125: Uint32Array,\n    5126: Float32Array,\n    'image/jpeg': Uint8Array,\n    'image/png': Uint8Array,\n};\n\nconst TYPE_SIZE = {\n    SCALAR: 1,\n    VEC2: 2,\n    VEC3: 3,\n    VEC4: 4,\n    MAT2: 4,\n    MAT3: 9,\n    MAT4: 16,\n};\n\nconst ATTRIBUTES = {\n    POSITION: 'position',\n    NORMAL: 'normal',\n    TANGENT: 'tangent',\n    TEXCOORD_0: 'uv',\n    TEXCOORD_1: 'uv2',\n    COLOR_0: 'color',\n    WEIGHTS_0: 'skinWeight',\n    JOINTS_0: 'skinIndex',\n};\n\nconst TRANSFORMS = {\n    translation: 'position',\n    rotation: 'quaternion',\n    scale: 'scale',\n};\n\nexport class GLTFLoader {\n    static setBasisManager(manager) {\n        this.basisManager = manager;\n    }\n\n    static async load(gl, src) {\n        const dir = src.split('/').slice(0, -1).join('/') + '/';\n\n        // load main description json\n        const desc = await this.parseDesc(src);\n\n        return await this.parse(gl, desc, dir);\n    }\n\n    static async parse(gl, desc, dir) {\n        if (desc.asset === undefined || desc.asset.version[0] < 2) console.warn('Only GLTF >=2.0 supported. Attempting to parse.');\n\n        if (desc.extensionsRequired?.includes('KHR_texture_basisu') && !this.basisManager)\n            console.warn('KHR_texture_basisu extension required but no manager supplied. Use .setBasisManager()');\n\n        // Load buffers async\n        const buffers = await this.loadBuffers(desc, dir);\n\n        // Unbind current VAO so that new buffers don't get added to active mesh\n        gl.renderer.bindVertexArray(null);\n\n        // Create gl buffers from bufferViews\n        const bufferViews = this.parseBufferViews(gl, desc, buffers);\n\n        // Create images from either bufferViews or separate image files\n        const images = await this.parseImages(gl, desc, dir, bufferViews);\n\n        const textures = this.parseTextures(gl, desc, images);\n\n        // Just pass through material data for now\n        const materials = this.parseMaterials(gl, desc, textures);\n\n        // Fetch the inverse bind matrices for skeleton joints\n        const skins = this.parseSkins(gl, desc, bufferViews);\n\n        // Create geometries for each mesh primitive\n        const meshes = this.parseMeshes(gl, desc, bufferViews, materials, skins);\n\n        // Create transforms, meshes and hierarchy\n        const nodes = this.parseNodes(gl, desc, meshes, skins, images);\n\n        // Place nodes in skeletons\n        this.populateSkins(skins, nodes);\n\n        // Create animation handlers\n        const animations = this.parseAnimations(gl, desc, nodes, bufferViews);\n\n        // Get top level nodes for each scene\n        const scenes = this.parseScenes(desc, nodes);\n        const scene = scenes[desc.scene];\n\n        // Create uniforms for scene lights (TODO: light linking?)\n        const lights = this.parseLights(gl, desc, nodes, scenes);\n\n        // Remove null nodes (instanced transforms)\n        for (let i = nodes.length; i >= 0; i--) if (!nodes[i]) nodes.splice(i, 1);\n\n        return {\n            json: desc,\n            buffers,\n            bufferViews,\n            images,\n            textures,\n            materials,\n            meshes,\n            nodes,\n            lights,\n            animations,\n            scenes,\n            scene,\n        };\n    }\n\n    static async parseDesc(src) {\n        if (!src.match(/\\.glb/)) {\n            return await fetch(src).then((res) => res.json());\n        } else {\n            return await fetch(src)\n                .then((res) => res.arrayBuffer())\n                .then((glb) => this.unpackGLB(glb));\n        }\n    }\n\n    // From https://github.com/donmccurdy/glTF-Transform/blob/e4108cc/packages/core/src/io/io.ts#L32\n    static unpackGLB(glb) {\n        // Decode and verify GLB header.\n        const header = new Uint32Array(glb, 0, 3);\n        if (header[0] !== 0x46546c67) {\n            throw new Error('Invalid glTF asset.');\n        } else if (header[1] !== 2) {\n            throw new Error(`Unsupported glTF binary version, \"${header[1]}\".`);\n        }\n        // Decode and verify chunk headers.\n        const jsonChunkHeader = new Uint32Array(glb, 12, 2);\n        const jsonByteOffset = 20;\n        const jsonByteLength = jsonChunkHeader[0];\n        if (jsonChunkHeader[1] !== 0x4e4f534a) {\n            throw new Error('Unexpected GLB layout.');\n        }\n\n        // Decode JSON.\n        const jsonText = new TextDecoder().decode(glb.slice(jsonByteOffset, jsonByteOffset + jsonByteLength));\n        const json = JSON.parse(jsonText);\n        // JSON only\n        if (jsonByteOffset + jsonByteLength === glb.byteLength) return json;\n\n        const binaryChunkHeader = new Uint32Array(glb, jsonByteOffset + jsonByteLength, 2);\n        if (binaryChunkHeader[1] !== 0x004e4942) {\n            throw new Error('Unexpected GLB layout.');\n        }\n        // Decode content.\n        const binaryByteOffset = jsonByteOffset + jsonByteLength + 8;\n        const binaryByteLength = binaryChunkHeader[0];\n        const binary = glb.slice(binaryByteOffset, binaryByteOffset + binaryByteLength);\n        // Attach binary to buffer\n        json.buffers[0].binary = binary;\n        return json;\n    }\n\n    // Threejs GLTF Loader https://github.com/mrdoob/three.js/blob/master/examples/js/loaders/GLTFLoader.js#L1085\n    static resolveURI(uri, dir) {\n        // Invalid URI\n        if (typeof uri !== 'string' || uri === '') return '';\n\n        // Host Relative URI\n        if (/^https?:\\/\\//i.test(dir) && /^\\//.test(uri)) {\n            dir = dir.replace(/(^https?:\\/\\/[^\\/]+).*/i, '$1');\n        }\n\n        // Absolute URI http://, https://, //\n        if (/^(https?:)?\\/\\//i.test(uri)) return uri;\n\n        // Data URI\n        if (/^data:.*,.*$/i.test(uri)) return uri;\n\n        // Blob URI\n        if (/^blob:.*$/i.test(uri)) return uri;\n\n        // Relative URI\n        return dir + uri;\n    }\n\n    static async loadBuffers(desc, dir) {\n        if (!desc.buffers) return null;\n        return await Promise.all(\n            desc.buffers.map((buffer) => {\n                // For GLB, binary buffer ready to go\n                if (buffer.binary) return buffer.binary;\n                const uri = this.resolveURI(buffer.uri, dir);\n                return fetch(uri).then((res) => res.arrayBuffer());\n            })\n        );\n    }\n\n    static parseBufferViews(gl, desc, buffers) {\n        if (!desc.bufferViews) return null;\n        // Clone to leave description pure\n        const bufferViews = desc.bufferViews.map((o) => Object.assign({}, o));\n\n        desc.meshes &&\n            desc.meshes.forEach(({ primitives }) => {\n                primitives.forEach(({ attributes, indices }) => {\n                    // Flag bufferView as an attribute, so it knows to create a gl buffer\n                    for (let attr in attributes) bufferViews[desc.accessors[attributes[attr]].bufferView].isAttribute = true;\n\n                    if (indices === undefined) return;\n                    bufferViews[desc.accessors[indices].bufferView].isAttribute = true;\n\n                    // Make sure indices bufferView have a target property for gl buffer binding\n                    bufferViews[desc.accessors[indices].bufferView].target = gl.ELEMENT_ARRAY_BUFFER;\n                });\n            });\n\n        // Get componentType of each bufferView from the accessors\n        desc.accessors.forEach(({ bufferView: i, componentType }) => {\n            bufferViews[i].componentType = componentType;\n        });\n\n        // Get mimetype of bufferView from images\n        desc.images &&\n            desc.images.forEach(({ uri, bufferView: i, mimeType }) => {\n                if (i === undefined) return;\n                bufferViews[i].mimeType = mimeType;\n            });\n\n        // Push each bufferView to the GPU as a separate buffer\n        bufferViews.forEach(\n            (\n                {\n                    buffer: bufferIndex, // required\n                    byteOffset = 0, // optional\n                    byteLength, // required\n                    byteStride, // optional\n                    target = gl.ARRAY_BUFFER, // optional, added above for elements\n                    name, // optional\n                    extensions, // optional\n                    extras, // optional\n\n                    componentType, // optional, added from accessor above\n                    mimeType, // optional, added from images above\n                    isAttribute,\n                },\n                i\n            ) => {\n                bufferViews[i].data = buffers[bufferIndex].slice(byteOffset, byteOffset + byteLength);\n\n                if (!isAttribute) return;\n                // Create gl buffers for the bufferView, pushing it to the GPU\n                const buffer = gl.createBuffer();\n                gl.bindBuffer(target, buffer);\n                gl.renderer.state.boundBuffer = buffer;\n                gl.bufferData(target, bufferViews[i].data, gl.STATIC_DRAW);\n                bufferViews[i].buffer = buffer;\n            }\n        );\n\n        return bufferViews;\n    }\n\n    static async parseImages(gl, desc, dir, bufferViews) {\n        if (!desc.images) return null;\n        return await Promise.all(\n            desc.images.map(async ({ uri, bufferView: bufferViewIndex, mimeType, name }) => {\n                if (mimeType === 'image/ktx2') {\n                    const { data } = bufferViews[bufferViewIndex];\n                    const image = await this.basisManager.parseTexture(data);\n                    return image;\n                }\n\n                // jpg / png\n                const image = new Image();\n                image.name = name;\n                if (uri) {\n                    image.src = this.resolveURI(uri, dir);\n                } else if (bufferViewIndex !== undefined) {\n                    const { data } = bufferViews[bufferViewIndex];\n                    const blob = new Blob([data], { type: mimeType });\n                    image.src = URL.createObjectURL(blob);\n                }\n                image.ready = new Promise((res) => {\n                    image.onload = () => res();\n                });\n                return image;\n            })\n        );\n    }\n\n    static parseTextures(gl, desc, images) {\n        if (!desc.textures) return null;\n        return desc.textures.map((textureInfo) => this.createTexture(gl, desc, images, textureInfo));\n    }\n\n    static createTexture(gl, desc, images, { sampler: samplerIndex, source: sourceIndex, name, extensions, extras }) {\n        if (sourceIndex === undefined && !!extensions) {\n            // Basis extension source index\n            if (extensions.KHR_texture_basisu) sourceIndex = extensions.KHR_texture_basisu.source;\n        }\n\n        const image = images[sourceIndex];\n        if (image.texture) return image.texture;\n\n        const options = {\n            flipY: false,\n            wrapS: gl.REPEAT, // Repeat by default, opposed to OGL's clamp by default\n            wrapT: gl.REPEAT,\n        };\n        const sampler = samplerIndex !== undefined ? desc.samplers[samplerIndex] : null;\n        if (sampler) {\n            ['magFilter', 'minFilter', 'wrapS', 'wrapT'].forEach((prop) => {\n                if (sampler[prop]) options[prop] = sampler[prop];\n            });\n        }\n\n        // For compressed textures\n        if (image.isBasis) {\n            options.image = image;\n            options.internalFormat = image.internalFormat;\n            if (image.isCompressedTexture) {\n                options.generateMipmaps = false;\n                if (image.length > 1) this.minFilter = gl.NEAREST_MIPMAP_LINEAR;\n            }\n            const texture = new Texture(gl, options);\n            texture.name = name;\n            image.texture = texture;\n            return texture;\n        }\n\n        const texture = new Texture(gl, options);\n        texture.name = name;\n        image.texture = texture;\n        image.ready.then(() => {\n            texture.image = image;\n        });\n\n        return texture;\n    }\n\n    static parseMaterials(gl, desc, textures) {\n        if (!desc.materials) return null;\n        return desc.materials.map(\n            ({\n                name,\n                extensions,\n                extras,\n                pbrMetallicRoughness = {},\n                normalTexture,\n                occlusionTexture,\n                emissiveTexture,\n                emissiveFactor = [0, 0, 0],\n                alphaMode = 'OPAQUE',\n                alphaCutoff = 0.5,\n                doubleSided = false,\n            }) => {\n                const {\n                    baseColorFactor = [1, 1, 1, 1],\n                    baseColorTexture,\n                    metallicFactor = 1,\n                    roughnessFactor = 1,\n                    metallicRoughnessTexture,\n                    //   extensions,\n                    //   extras,\n                } = pbrMetallicRoughness;\n\n                if (baseColorTexture) {\n                    baseColorTexture.texture = textures[baseColorTexture.index];\n                    // texCoord\n                }\n                if (normalTexture) {\n                    normalTexture.texture = textures[normalTexture.index];\n                    // scale: 1\n                    // texCoord\n                }\n                if (metallicRoughnessTexture) {\n                    metallicRoughnessTexture.texture = textures[metallicRoughnessTexture.index];\n                    // texCoord\n                }\n                if (occlusionTexture) {\n                    occlusionTexture.texture = textures[occlusionTexture.index];\n                    // strength 1\n                    // texCoord\n                }\n                if (emissiveTexture) {\n                    emissiveTexture.texture = textures[emissiveTexture.index];\n                    // texCoord\n                }\n\n                return {\n                    name,\n                    extensions,\n                    extras,\n                    baseColorFactor,\n                    baseColorTexture,\n                    metallicFactor,\n                    roughnessFactor,\n                    metallicRoughnessTexture,\n                    normalTexture,\n                    occlusionTexture,\n                    emissiveTexture,\n                    emissiveFactor,\n                    alphaMode,\n                    alphaCutoff,\n                    doubleSided,\n                };\n            }\n        );\n    }\n\n    static parseSkins(gl, desc, bufferViews) {\n        if (!desc.skins) return null;\n        return desc.skins.map(\n            ({\n                inverseBindMatrices, // optional\n                skeleton, // optional\n                joints, // required\n                // name,\n                // extensions,\n                // extras,\n            }) => {\n                return {\n                    inverseBindMatrices: this.parseAccessor(inverseBindMatrices, desc, bufferViews),\n                    skeleton,\n                    joints,\n                };\n            }\n        );\n    }\n\n    static parseMeshes(gl, desc, bufferViews, materials, skins) {\n        if (!desc.meshes) return null;\n        return desc.meshes.map(\n            (\n                {\n                    primitives, // required\n                    weights, // optional\n                    name, // optional\n                    extensions, // optional\n                    extras, // optional\n                },\n                meshIndex\n            ) => {\n                // TODO: weights stuff ?\n                // Parse through nodes to see how many instances there are\n                // and if there is a skin attached\n                // If multiple instances of a skin, need to create each\n                let numInstances = 0;\n                let skinIndices = [];\n                let isLightmap = false;\n                desc.nodes &&\n                    desc.nodes.forEach(({ mesh, skin, extras }) => {\n                        if (mesh === meshIndex) {\n                            numInstances++;\n                            if (skin !== undefined) skinIndices.push(skin);\n                            if (extras && extras.lightmap_scale_offset) isLightmap = true;\n                        }\n                    });\n                let isSkin = !!skinIndices.length;\n\n                // For skins, return array of skin meshes to account for multiple instances\n                if (isSkin) {\n                    primitives = skinIndices.map((skinIndex) => {\n                        return this.parsePrimitives(gl, primitives, desc, bufferViews, materials, 1, isLightmap).map(\n                            ({ geometry, program, mode }) => {\n                                const mesh = new GLTFSkin(gl, { skeleton: skins[skinIndex], geometry, program, mode });\n                                mesh.name = name;\n                                // TODO: support skin frustum culling\n                                mesh.frustumCulled = false;\n                                return mesh;\n                            }\n                        );\n                    });\n                    // For retrieval to add to node\n                    primitives.instanceCount = 0;\n                    primitives.numInstances = numInstances;\n                } else {\n                    primitives = this.parsePrimitives(gl, primitives, desc, bufferViews, materials, numInstances, isLightmap).map(\n                        ({ geometry, program, mode }) => {\n                            // InstancedMesh class has custom frustum culling for instances\n                            const meshConstructor = geometry.attributes.instanceMatrix ? InstancedMesh : Mesh;\n                            const mesh = new meshConstructor(gl, { geometry, program, mode });\n                            mesh.name = name;\n                            // Tag mesh so that nodes can add their transforms to the instance attribute\n                            mesh.numInstances = numInstances;\n                            return mesh;\n                        }\n                    );\n                }\n\n                return {\n                    primitives,\n                    weights,\n                    name,\n                };\n            }\n        );\n    }\n\n    static parsePrimitives(gl, primitives, desc, bufferViews, materials, numInstances, isLightmap) {\n        return primitives.map(\n            ({\n                attributes, // required\n                indices, // optional\n                material: materialIndex, // optional\n                mode = 4, // optional\n                targets, // optional\n                extensions, // optional\n                extras, // optional\n            }) => {\n                // TODO: materials\n                const program = new NormalProgram(gl);\n                if (materialIndex !== undefined) {\n                    program.gltfMaterial = materials[materialIndex];\n                }\n\n                const geometry = new Geometry(gl);\n\n                // Add each attribute found in primitive\n                for (let attr in attributes) {\n                    geometry.addAttribute(ATTRIBUTES[attr], this.parseAccessor(attributes[attr], desc, bufferViews));\n                }\n\n                // Add index attribute if found\n                if (indices !== undefined) {\n                    geometry.addAttribute('index', this.parseAccessor(indices, desc, bufferViews));\n                }\n\n                // Add instanced transform attribute if multiple instances\n                // Ignore if skin as we don't support instanced skins out of the box\n                if (numInstances > 1) {\n                    geometry.addAttribute('instanceMatrix', {\n                        instanced: 1,\n                        size: 16,\n                        data: new Float32Array(numInstances * 16),\n                    });\n                }\n\n                // Always supply lightmapScaleOffset as an instanced attribute\n                // Instanced skin lightmaps not supported\n                if (isLightmap) {\n                    geometry.addAttribute('lightmapScaleOffset', {\n                        instanced: 1,\n                        size: 4,\n                        data: new Float32Array(numInstances * 4),\n                    });\n                }\n\n                return {\n                    geometry,\n                    program,\n                    mode,\n                };\n            }\n        );\n    }\n\n    static parseAccessor(index, desc, bufferViews) {\n        // TODO: init missing bufferView with 0s\n        // TODO: support sparse\n\n        const {\n            bufferView: bufferViewIndex, // optional\n            byteOffset = 0, // optional\n            componentType, // required\n            normalized = false, // optional\n            count, // required\n            type, // required\n            min, // optional\n            max, // optional\n            sparse, // optional\n            // name, // optional\n            // extensions, // optional\n            // extras, // optional\n        } = desc.accessors[index];\n\n        const {\n            data, // attached in parseBufferViews\n            buffer, // replaced to be the actual GL buffer\n            byteOffset: bufferByteOffset = 0,\n            // byteLength, // applied in parseBufferViews\n            byteStride = 0,\n            target,\n            // name,\n            // extensions,\n            // extras,\n        } = bufferViews[bufferViewIndex];\n\n        const size = TYPE_SIZE[type];\n\n        // Parse data from joined buffers\n        const TypeArray = TYPE_ARRAY[componentType];\n        const elementBytes = TypeArray.BYTES_PER_ELEMENT;\n        const componentStride = byteStride / elementBytes;\n        const isInterleaved = !!byteStride && componentStride !== size;\n\n        let filteredData;\n\n        // Convert data to typed array for various uses (bounding boxes, raycasting, animation, merging etc)\n        if (isInterleaved) {\n            // First convert entire buffer to type\n            const typedData = new TypeArray(data, byteOffset);\n            // TODO: add length to not copy entire buffer if can help it\n            // const typedData = new TypeArray(data, byteOffset, (count - 1) * componentStride)\n\n            // Create output with length\n            filteredData = new TypeArray(count * size);\n\n            // Add element by element\n            for (let i = 0; i < count; i++) {\n                const start = componentStride * i;\n                const end = start + size;\n                filteredData.set(typedData.slice(start, end), i * size);\n            }\n        } else {\n            // Simply a slice\n            filteredData = new TypeArray(data, byteOffset, count * size);\n        }\n\n        // Return attribute data\n        return {\n            data: filteredData,\n            size,\n            type: componentType,\n            normalized,\n            buffer,\n            stride: byteStride,\n            offset: byteOffset,\n            count,\n            min,\n            max,\n        };\n    }\n\n    static parseNodes(gl, desc, meshes, skins, images) {\n        if (!desc.nodes) return null;\n        const nodes = desc.nodes.map(\n            ({\n                camera, // optional\n                children, // optional\n                skin: skinIndex, // optional\n                matrix, // optional\n                mesh: meshIndex, // optional\n                rotation, // optional\n                scale, // optional\n                translation, // optional\n                weights, // optional\n                name, // optional\n                extensions, // optional\n                extras, // optional\n            }) => {\n                const node = new Transform();\n                if (name) node.name = name;\n                node.extras = extras;\n                node.extensions = extensions;\n\n                // Need to attach to node as may have same material but different lightmap\n                if (extras && extras.lightmapTexture !== undefined) {\n                    extras.lightmapTexture.texture = this.createTexture(gl, desc, images, { source: extras.lightmapTexture.index });\n                }\n\n                // Apply transformations\n                if (matrix) {\n                    node.matrix.copy(matrix);\n                    node.decompose();\n                } else {\n                    if (rotation) node.quaternion.copy(rotation);\n                    if (scale) node.scale.copy(scale);\n                    if (translation) node.position.copy(translation);\n                    node.updateMatrix();\n                }\n\n                // Flags for avoiding duplicate transforms and removing unused instance nodes\n                let isInstanced = false;\n                let isFirstInstance = true;\n                let isInstancedMatrix = false;\n                let isSkin = skinIndex !== undefined;\n\n                // add mesh if included\n                if (meshIndex !== undefined) {\n                    if (isSkin) {\n                        meshes[meshIndex].primitives[meshes[meshIndex].primitives.instanceCount].forEach((mesh) => {\n                            mesh.extras = extras;\n                            mesh.setParent(node);\n                        });\n                        meshes[meshIndex].primitives.instanceCount++;\n                        // Remove properties once all instances added\n                        if (meshes[meshIndex].primitives.instanceCount === meshes[meshIndex].primitives.numInstances) {\n                            delete meshes[meshIndex].primitives.numInstances;\n                            delete meshes[meshIndex].primitives.instanceCount;\n                        }\n                    } else {\n                        meshes[meshIndex].primitives.forEach((mesh) => {\n                            mesh.extras = extras;\n\n                            // instanced mesh might only have 1\n                            if (mesh.geometry.isInstanced) {\n                                isInstanced = true;\n                                if (!mesh.instanceCount) {\n                                    mesh.instanceCount = 0;\n                                } else {\n                                    isFirstInstance = false;\n                                }\n                                if (mesh.geometry.attributes.instanceMatrix) {\n                                    isInstancedMatrix = true;\n                                    node.matrix.toArray(mesh.geometry.attributes.instanceMatrix.data, mesh.instanceCount * 16);\n                                }\n\n                                if (mesh.geometry.attributes.lightmapScaleOffset) {\n                                    mesh.geometry.attributes.lightmapScaleOffset.data.set(extras.lightmap_scale_offset, mesh.instanceCount * 4);\n                                }\n\n                                mesh.instanceCount++;\n\n                                if (mesh.instanceCount === mesh.numInstances) {\n                                    // Remove properties once all instances added\n                                    delete mesh.numInstances;\n                                    delete mesh.instanceCount;\n                                    // Flag attribute as dirty\n                                    if (mesh.geometry.attributes.instanceMatrix) {\n                                        mesh.geometry.attributes.instanceMatrix.needsUpdate = true;\n                                    }\n                                    if (mesh.geometry.attributes.lightmapScaleOffset) {\n                                        mesh.geometry.attributes.lightmapScaleOffset.needsUpdate = true;\n                                    }\n                                }\n                            }\n\n                            // For instances, only the first node will actually have the mesh\n                            if (isInstanced) {\n                                if (isFirstInstance) mesh.setParent(node);\n                            } else {\n                                mesh.setParent(node);\n                            }\n                        });\n                    }\n                }\n\n                // Reset node if instanced to not duplicate transforms\n                if (isInstancedMatrix) {\n                    // Remove unused nodes just providing an instance transform\n                    if (!isFirstInstance) return null;\n                    // Avoid duplicate transform for node containing the instanced mesh\n                    node.matrix.identity();\n                    node.decompose();\n                }\n\n                return node;\n            }\n        );\n\n        desc.nodes.forEach(({ children = [] }, i) => {\n            // Set hierarchy now all nodes created\n            children.forEach((childIndex) => {\n                if (!nodes[childIndex]) return;\n                nodes[childIndex].setParent(nodes[i]);\n            });\n        });\n\n        // Add frustum culling for instances now that instanceMatrix attribute is populated\n        meshes.forEach(({ primitives }, i) => {\n            primitives.forEach((primitive, i) => {\n                if (primitive.isInstancedMesh) primitive.addFrustumCull();\n            });\n        });\n\n        return nodes;\n    }\n\n    static populateSkins(skins, nodes) {\n        if (!skins) return;\n        skins.forEach((skin) => {\n            skin.joints = skin.joints.map((i, index) => {\n                const joint = nodes[i];\n                joint.skin = skin;\n                joint.bindInverse = new Mat4(...skin.inverseBindMatrices.data.slice(index * 16, (index + 1) * 16));\n                return joint;\n            });\n            if (skin.skeleton) skin.skeleton = nodes[skin.skeleton];\n        });\n    }\n\n    static parseAnimations(gl, desc, nodes, bufferViews) {\n        if (!desc.animations) return null;\n        return desc.animations.map(\n            (\n                {\n                    channels, // required\n                    samplers, // required\n                    name, // optional\n                    // extensions, // optional\n                    // extras,  // optional\n                },\n                animationIndex\n            ) => {\n                const data = channels.map(\n                    ({\n                        sampler: samplerIndex, // required\n                        target, // required\n                        // extensions, // optional\n                        // extras, // optional\n                    }) => {\n                        const {\n                            input: inputIndex, // required\n                            interpolation = 'LINEAR',\n                            output: outputIndex, // required\n                            // extensions, // optional\n                            // extras, // optional\n                        } = samplers[samplerIndex];\n\n                        const {\n                            node: nodeIndex, // optional - TODO: when is it not included?\n                            path, // required\n                            // extensions, // optional\n                            // extras, // optional\n                        } = target;\n\n                        const node = nodes[nodeIndex];\n                        const transform = TRANSFORMS[path];\n                        const times = this.parseAccessor(inputIndex, desc, bufferViews).data;\n                        const values = this.parseAccessor(outputIndex, desc, bufferViews).data;\n\n                        // Store reference on node for cyclical retrieval\n                        if (!node.animations) node.animations = [];\n                        if (!node.animations.includes(animationIndex)) node.animations.push(animationIndex);\n\n                        return {\n                            node,\n                            transform,\n                            interpolation,\n                            times,\n                            values,\n                        };\n                    }\n                );\n\n                return {\n                    name,\n                    animation: new GLTFAnimation(data),\n                };\n            }\n        );\n    }\n\n    static parseScenes(desc, nodes) {\n        if (!desc.scenes) return null;\n        return desc.scenes.map(\n            ({\n                nodes: nodesIndices = [],\n                name, // optional\n                extensions,\n                extras,\n            }) => {\n                const scene = nodesIndices.reduce((map, i) => {\n                    // Don't add null nodes (instanced transforms)\n                    if (nodes[i]) map.push(nodes[i]);\n                    return map;\n                }, []);\n                scene.extras = extras;\n                return scene;\n            }\n        );\n    }\n\n    static parseLights(gl, desc, nodes, scenes) {\n        const lights = {\n            directional: [],\n            point: [],\n            spot: [],\n        };\n\n        // Update matrices on root nodes\n        scenes.forEach((scene) => scene.forEach((node) => node.updateMatrixWorld()));\n\n        // uses KHR_lights_punctual extension\n        const lightsDescArray = desc.extensions?.KHR_lights_punctual?.lights || [];\n\n        // Need nodes for transforms\n        nodes.forEach((node) => {\n            if (!node?.extensions?.KHR_lights_punctual) return;\n            const lightIndex = node.extensions.KHR_lights_punctual.light;\n            const lightDesc = lightsDescArray[lightIndex];\n            const light = {\n                name: lightDesc.name || '',\n                color: { value: new Vec3().set(lightDesc.color || 1) },\n            };\n            // Apply intensity directly to color\n            if (lightDesc.intensity !== undefined) light.color.value.multiply(lightDesc.intensity);\n\n            switch (lightDesc.type) {\n                case 'directional':\n                    light.direction = { value: new Vec3(0, 0, 1).transformDirection(node.worldMatrix) };\n                    break;\n                case 'point':\n                    light.position = { value: new Vec3().applyMatrix4(node.worldMatrix) };\n                    light.distance = { value: lightDesc.range };\n                    light.decay = { value: 2 };\n                    break;\n                case 'spot':\n                    // TODO: support spot uniforms\n                    Object.assign(light, lightDesc);\n                    break;\n            }\n\n            lights[lightDesc.type].push(light);\n        });\n\n        return lights;\n    }\n}\n", "import { Mesh } from '../../core/Mesh.js';\nimport { Program } from '../../core/Program.js';\nimport { Geometry } from '../../core/Geometry.js';\nimport { Vec3 } from '../../math/Vec3.js';\n\nexport class GridHelper extends Mesh {\n    constructor(gl, { size = 10, divisions = 10, color = new Vec3(0.75, 0.75, 0.75), ...meshProps } = {}) {\n        const numVertices = (size + 1) * 2 * 2;\n        const vertices = new Float32Array(numVertices * 3);\n\n        const hs = size / 2;\n        for (let i = 0; i <= divisions; i++) {\n            const t = i / divisions;\n            const o = t * size - hs;\n\n            vertices.set([o, 0, -hs, o, 0, hs], i * 12);\n            vertices.set([-hs, 0, o, hs, 0, o], i * 12 + 6);\n        }\n\n        const geometry = new Geometry(gl, {\n            position: { size: 3, data: vertices },\n        });\n\n        const program = new Program(gl, {\n            vertex,\n            fragment,\n            uniforms: {\n                color: { value: color },\n            },\n        });\n        super(gl, { ...meshProps, mode: gl.LINES, geometry, program });\n    }\n}\n\nconst vertex = /* glsl */ `\nattribute vec3 position;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nvoid main() {    \n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n`;\n\nconst fragment = /* glsl */ `\nprecision highp float;\nuniform vec3 color;\n\nvoid main() {    \n    gl_FragColor = vec4(color, 1.0);\n}\n`;\n", "import { Program, Mesh, Texture, Box } from './ogl/src/index.mjs';\n\nexport class SkyBox extends Mesh {\n    constructor(gl, imgArray) {\n        const texture = new Texture(gl, {image: imgArray, target: gl.TEXTURE_CUBE_MAP});\n        const geometry = new Box(gl);\n        const program = new Program(gl, {\n            vertex: `#version 300 es\n            in vec3 position;\n            out vec3 uv;\n\n            uniform mat4 modelViewMatrix;\n            uniform mat4 projectionMatrix;\n\n            void main() {\n                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                uv = position;\n            }\n            `,\n            fragment: `#version 300 es\n            precision highp float;\n            //uniform samplerCube tMap;\n            in vec3 uv;\n            out vec4 outColor;\n\n            void main() {\n                float sky = clamp(uv.y + 0.5, 0.0, 1.0);\n                //outColor = texture(tMap, uv);\n                outColor = vec4(sky / 2.0, sky / 2.0, sky, 1.0);\n            }\n            `,\n            //uniforms: {\n            //    tMap: { value: texture },\n            //},\n            cullFace: null,\n        });\n\n        super(gl, {geometry, program});\n        this.worldMatrix.scale(100);\n        this.beforeRenderCallbacks = [\n            () => {\n                this.program.uniforms.modelViewMatrix.value.setPosition([0, 0, 0]);\n            }\n        ];\n    }\n\n    updateMatrix() {\n        return;\n    }\n    updateMatrixWorld(force) {\n        return;\n    }\n}\n", "export class MessageBus {\n  constructor () {\n    this.types = {};\n  }\n\n  register(type, func) {\n    if (this.types[type] === undefined) {this.types[type] = [];}\n    const index = this.types[type].push(func);\n    // (index - 1) because the push method returns the length of the array\n    return () => {delete this.types[type][index-1]};\n  }\n\n  send(type, data) {\n    if(type in this.types) {\n      for (const func of this.types[type]) {\n        func(data);\n      }\n    }\n  }\n}\n", "export function makeButtonInList(buttonLabel, listId, callback) {\n  const li = document.createElement(\"li\");\n  const button = document.createElement(\"button\");\n  button.append(buttonLabel);\n  button.addEventListener(\"click\", callback);\n  li.append(button);\n  document.getElementById(listId).append(li);\n}\n", "import { Vec2, Vec3, Mesh, GridHelper } from './ogl/src/index.mjs';\nimport {makeButtonInList} from './ui.js';\n\nconst STATE = {EDIT: 0, GRAB: 1, TERRAIN_EDIT: 2, DISABLED: -1}\nconst PLANE = {origin: new Vec3(0, 0, 0), normal: new Vec3(0, 1, 0)}\n\nexport class EditMode {\n  constructor({msgBus = msgBus,\n               raycast = raycast,\n               scene = scene,\n               camera = camera,\n               renderer = renderer},\n              terrain) {\n    this.state = STATE.EDIT;\n    this.heldObject = null;\n    this.gl = renderer.gl;\n    this.canvas = renderer.gl.canvas;\n    this.msgBus = msgBus;\n    this.raycast = raycast;\n    this.scene = scene;\n    this.camera = camera;\n    this.renderer = renderer;\n    this.mouse = new Vec2();\n    this.objectList = [];\n    this.terrain = terrain;\n    this.raycast.createList(\"terrainCells\", \"BOUNDS\");\n    for (const cell of terrain.grid) {this.raycast.addObject(cell, \"terrainCells\")}\n    this.gridHelper = new GridHelper(this.gl, {size: 100, divisions: 100});\n    this.gridHelper.setParent(this.scene);\n    this.msgBus.register(\"onAssetsLoaded\", (assets) => {this.setupAssets(assets)});\n    this.registerCallbacks();\n  }\n\n  setupAssets(assets) {\n    this.assets = assets.items;\n    for (const assetId in this.assets) {\n      makeButtonInList(this.assets[assetId].name, \"buttonList\", (event) => {\n        if (this.heldObject) this.heldObject = undefined;\n        this.heldObject = new Mesh(this.gl, this.assets[assetId]);\n        this.state = STATE.GRAB;\n        this.heldObject.position[2] = -1000;\n        this.heldObject.setParent(this.scene);\n      });\n    }\n    makeButtonInList(\"Clear\", \"buttonList\", () => {\n      if (this.heldObject) {\n        this.heldObject.setParent(null);\n        this.heldObject = undefined;\n      }\n        this.state = STATE.EDIT;\n    });\n    makeButtonInList(\"Edit Terrain\", \"buttonList\", () => {\n      if (this.heldObject) {\n        this.heldObject.setParent(null);\n        this.heldObject = undefined;\n      }\n      this.state = STATE.TERRAIN_EDIT;\n    });\n  }\n\n  pointerDown(e) {\n    switch ( this.state ) {\n      case STATE.GRAB:\n        this.heldObjectDrop(e);\n        break;\n      case STATE.EDIT:\n        this.heldObjectGrab(e);\n        break;\n      case STATE.TERRAIN_EDIT:\n        this.terrainDestroy(e);\n        break;\n    }\n  }\n\n  pointerMove(e) {\n    if ( this.state == STATE.GRAB ) {\n      this.heldObjectUpdate(e);\n    }\n  }\n\n  terrainDestroy(e) {\n    const hits = this.raycast.intersectList(e, this.camera, \"terrainCells\");\n    if (hits[0]) {\n      hits[0].filled = false;\n      this.raycast.removeObject(hits[0], \"terrainCells\");\n      this.terrain.updateCellNeighbors(hits[0].x, hits[0].y);\n    }\n  }\n\n  heldObjectUpdate(e) {\n    const intersection = this.raycast.intersectPlane(e, this.camera, PLANE);\n    if (intersection) {\n      this.heldObject.position = intersection.clone();\n    }\n  }\n  heldObjectDrop(e) {\n    this.heldObjectUpdate(e);\n    this.state = STATE.EDIT;\n    this.objectList.push(this.heldObject);\n    this.heldObject = undefined;\n  }\n\n  heldObjectGrab(e) {\n    const hits = this.raycast.intersectMeshes(\n      e, this.camera, this.objectList, {includeUV: false, includeNormal: false}\n    );\n    if (hits.length) {\n      this.heldObject = hits[0];\n      const objIndex = this.objectList.indexOf(hits[0]);\n      if (objIndex > -1) {this.objectList.splice(objIndex, 1)}\n      this.state = STATE.GRAB;\n    }\n  }\n\n  registerCallbacks() {\n    this.canvas.addEventListener('pointerdown', (e) => this.pointerDown(e));\n    this.canvas.addEventListener('pointermove', (e) => this.pointerMove(e));\n  }\n\n  unregisterCallbacks() {\n\n  }\n}\n", "import {Program, Transform, Mesh, Box, Plane, Vec2} from './ogl/src/index.mjs';\n\nconst GRID_X = 100;\nconst GRID_Y = 100;\nconst GRID_OFFSET_X = GRID_X / 2 - 0.5;\nconst GRID_OFFSET_Y = GRID_X / 2 - 0.5;\n\nfunction calcOffset(x, y) {\n  return y * GRID_X + x;\n}\nfunction calcGridToWorld(x, y, z) {\n  return [x - GRID_OFFSET_X, y, z - GRID_OFFSET_Y];\n}\nfunction withinBounds(x, y) {\n  if (x >= 0 && x < GRID_X && y >= 0 && y < GRID_Y) return true;\n  else return false;\n}\n\nconst NEIGHBORS = [[0, 1, 0], [0, -1, Math.PI], [1, 0, 0.5 * Math.PI], [-1, 0, 1.5 * Math.PI]];\n\nexport class Terrain {\n  constructor({scene = scene, renderer = renderer, msgBus = msgBus, raycast = raycast}) {\n    msgBus.register(\"onAssetsLoaded\", (assets)=>{this.setupWalls(assets)});\n    this.gl = renderer.gl;\n    this.scene = scene;\n    this.program = new Program(this.gl, {\n      vertex: /* glsl */ `#version 300 es\n            in vec3 position;\n            in vec3 normal;\n\n            uniform mat4 modelViewMatrix;\n            uniform mat4 projectionMatrix;\n            out vec3 vNormal;\n\n            void main() {\n                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                vNormal = normal;\n            }\n        `,\n      fragment: /* glsl */ `#version 300 es\n            precision highp float;\n            in vec3 vNormal;\n            out vec4 outColor;\n            void main() {\n                outColor = vec4(0.5, 0.0, 0.5, 1.0);\n            }\n            `,\n    });\n    this.grid = [];\n    this.origin = new Transform();\n    for (let y = 0; y < GRID_Y; y++) {\n      for (let x = 0; x < GRID_X; x++) {\n        const min = calcGridToWorld(x - 0.5, 0, y - 0.5);\n        const max = calcGridToWorld(x + 0.5, 2, y + 0.5);\n        // the id is there for raycast lists. it is not globally unique\n        this.grid.push({walls: [], filled: true, x: x, y: y, id: calcOffset(x, y), bounds: {\n          min: {x: min[0], y: min[1], z: min[2]},\n          max: {x: max[0], y: max[1], z: max[2]},\n        }});\n      }\n    }\n    this.origin.setParent(scene);\n    msgBus.send(\"onTerrainLoaded\", this);\n  }\n  setupWalls(assets) {\n    this.walls = assets.walls;\n    for (let y = 0; y < GRID_Y; y++) {\n      for (let x = 0; x < GRID_X; x++) {\n        this.updateCell(x, y);\n      }\n    }\n  }\n  updateCellNeighbors (x, y) {\n    this.updateCell(x, y);\n    for (const direction of NEIGHBORS) {\n      this.updateCell(x + direction[0], y + direction[1]);\n    }\n  }\n  updateCell(x, y) {\n    const cell = this.grid[calcOffset(x, y)];\n    if (!withinBounds(x, y)) return;\n    if (cell.walls.length > 0) {\n      for (const wall of cell.walls) {\n        wall.setParent(null);\n      }\n      cell.walls = [];\n    }\n    if (cell.filled) return;\n    for (const direction of NEIGHBORS) {\n      const neighbor = this.grid[calcOffset(x + direction[0], y + direction[1])];\n      if (!withinBounds(x + direction[0], y + direction[1]) || neighbor?.filled) {\n        const newWall = new Mesh(this.gl, {geometry: this.walls[\"1\"].geometry, program: this.program});\n        // divided by 2, because calcGridToWorld centers the coordinates in the grid cell\n        // only 0.5 is needed to move the wall to its place\n        newWall.position = calcGridToWorld(x + (direction[0] / 2), 0, y + (direction[1] / 2));\n        newWall.rotation.y = direction[2];\n        newWall.setParent(this.scene);\n        cell.walls.push(newWall);\n      }\n    }\n  }\n}\n", "import {Vec3, Raycast} from './ogl/src/index.mjs';\n\n// ogl has a raycast class, but using it directly is annoying\n// this helps us track extra information about raycasting\n\nexport class RaycastHelper {\n  constructor(renderer) {\n    this.renderer = renderer;\n    this.raycast = new Raycast(renderer.gl);\n    this.intersectLists = {};\n    this.intersectionTypes = {\n      BOUNDS: this.intersectBounds.bind(this),\n      MESHES: this.intersectMeshes.bind(this),\n    };\n  }\n\n  createList(list, type) {\n    this.intersectLists[list] = {\n      func: this.intersectionTypes[type],\n      array: [],\n    };\n  }\n  intersectList(e, camera, list) {\n    return this.intersectLists[list].func(\n      e, camera, this.intersectLists[list].array\n    );\n  }\n\n  addObject(object, list) {\n    if (this.intersectLists[list]) {\n      this.intersectLists[list].array.push(object);\n    } else {console.warn(\"Intersection list doesn't exist!\")}\n  }\n\n  removeObject(object, list) {\n    if (this.intersectLists[list]) {\n      const objIndex = this.intersectLists[list].array.indexOf(object);\n      if (objIndex > -1) {this.intersectLists[list].array.splice(objIndex, 1)}\n    } else {console.warn(\"Intersection list doesn't exist!\")}\n  }\n\n  castMouseRay(e, camera) {\n    // that long calculation there turns the canvas coordinates into clip space coords\n    this.raycast.castMouse(\n      camera,\n      [2.0 * (e.x / this.renderer.width) - 1.0, 2.0 * (1.0 - e.y / this.renderer.height) - 1.0]\n    );\n  }\n  intersectPlane(e, camera, plane) {\n    this.castMouseRay(e, camera);\n    return this.raycast.intersectPlane(plane);\n  }\n  intersectMeshes(e, camera, objList, options) {\n    this.castMouseRay(e, camera);\n    return this.raycast.intersectMeshes(objList, options);\n  }\n  intersectBounds(e, camera, cellList) {\n    // probably breaks if boxes aren't axis aligned\n    this.castMouseRay(e, camera);\n    const hits = [];\n\n    for (const cell of cellList) {\n      cell.hitDistance = this.raycast.intersectBox(cell.bounds);\n      if (cell.hitDistance) hits.push(cell);\n    }\n\n    hits.sort((a, b) => a.hitDistance - b.hitDistance);\n    return hits;\n  }\n}\n", "import { Renderer, Camera, Transform, Orbit, Program, Mesh, Sphere,\n         GLTFLoader, BasisManager, Texture, Box, Vec2, Vec3 } from './ogl/src/index.mjs';\nimport {SkyBox} from './skybox.js';\nimport {MessageBus} from './abstract.js';\nimport {EditMode} from './editmode.js';\nimport {Terrain} from './terrain.js';\nimport {RaycastHelper} from './rayhelp.js';\n\nfunction shallowClone(obj) {\n    return Object.create(Object.getPrototypeOf(obj), Object.getOwnPropertyDescriptors(obj));\n}\n\nfunction init() {\n    const canvasElem = document.querySelector(\"#renderCanvas\");\n    const renderer = new Renderer({ dpr: 1, canvas: canvasElem });\n    const gl = renderer.gl;\n    const camera = new Camera(gl, { near: 0.1, far: 10000 });\n\n    function resize() {\n        renderer.setSize(canvasElem.parentNode.clientWidth, canvasElem.parentNode.clientHeight);\n        camera.perspective({ aspect: gl.canvas.width / gl.canvas.height });\n    }\n    window.addEventListener('resize', resize, false);\n    resize();\n\n    const controls = new Orbit(camera, {element: canvasElem});\n    camera.position\n          .set(0, 0.5, -1)\n          .normalize()\n          .multiply(2.5)\n          .add([5, 5, -5]);\n    controls.target.copy([0, 2, 2]);\n    controls.forcePosition();\n\n    const assets = {items: {}, walls: {}};\n    const scene = new Transform();\n    const raycast = new RaycastHelper(renderer);\n    loadAssets();\n\n    const msgBus = new MessageBus();\n\n    let view = new Vec3(0, 0, 0);\n    const program = new Program(gl, {\n        vertex: /* glsl */ `#version 300 es\n            in vec3 position;\n            in vec4 color;\n            in vec3 normal;\n            uniform vec3 view;\n            //in vec2 uv;\n\n            uniform mat4 modelViewMatrix;\n            uniform mat4 projectionMatrix;\n            //out vec2 v_uv;\n            out vec4 vColor;\n            out vec3 vNormal;\n            out vec3 vView;\n\n            void main() {\n                vView = normalize(view);\n                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                vColor = color;\n                vNormal = normal;\n                //v_uv = uv;\n            }\n        `,\n        fragment: /* glsl */ `#version 300 es\n            precision highp float;\n            //in vec2 v_uv;\n            in vec4 vColor;\n            in vec3 vNormal;\n            in vec3 vView;\n            out vec4 outColor;\n            //uniform sampler2D tBaseColor;\n            void main() {\n                vec3 light = vec3(0, 1, 0);\n                vec3 normal = normalize(vNormal);\n                float t = (dot(normal, light) + 1.0) / 2.0;\n                vec3 r = 2.0 * dot(normal, light) * normal - light;\n                float s = clamp(100.0 * dot(r, vView) - 97.0, 0.0, 1.0);\n\n                vec3 cool = vec3(0.2, 0.2, 0.6) * t + t * vColor.xyz;\n                vec3 warm = vec3(0.3, 0.3, 0.0) + 0.25 * vColor.xyz;\n                vec3 highlight = vec3(1.0, 1.0, 1.0);\n                vec3 shaded = vec3(1.0, 1.0, 1.0) * s + cool * (1.0 - s);\n                //outColor = texture(tBaseColor, v_uv);\n                outColor = vec4(shaded, 1.0);\n            }\n        `,\n        uniforms: {view: view},\n    });\n    const context = {scene: scene, raycast: raycast, renderer: renderer, camera: camera, msgBus: msgBus}\n    const terrain = new Terrain(context);\n    const editMode = new EditMode(context, terrain);\n\n    async function loadAssets() {\n        const gltf = await GLTFLoader.load(gl, `assets.glb`);\n        console.log(gltf);\n        const s = gltf.scene || gltf.scenes[0];\n        s.forEach((root) => {\n            root.traverse((node) => {\n                if (node.geometry && node.extras.asset_id) {assets.items[node.extras.asset_id] = node}\n                if (node.extras.wall_id) {assets.walls[node.extras.wall_id] = node}\n                if (node.program) {\n                    const material = node.program.gltfMaterial || {};\n                    node.program = program;\n                }\n            });\n        });\n\n        const skybox = new SkyBox(gl);\n        skybox.setParent(scene);\n        msgBus.send(\"onAssetsLoaded\", assets);\n    }\n\n    requestAnimationFrame(update);\n    function update() {\n        requestAnimationFrame(update);\n        controls.update();\n        view.set(0, 0, 1);\n        view.applyQuaternion(camera.quaternion);\n        program.uniforms.view.value = view;\n        renderer.render({ scene, camera, sort: false, frustumCull: false });\n    }\n}\n\ninit();\n"],
  "mappings": "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",
  "names": ["length", "a", "x", "y", "z", "copy", "out", "set", "add", "b", "subtract", "multiply", "divide", "scale", "distance", "squaredDistance", "squaredLength", "negate", "inverse", "normalize", "len", "dot", "cross", "ax", "ay", "az", "bx", "by", "bz", "lerp", "t", "transformMat4", "m", "w", "scaleRotateMat4", "transformMat3", "transformQuat", "q", "qx", "qy", "qz", "qw", "uvx", "uvy", "uvz", "uuvx", "uuvy", "uuvz", "w2", "angle", "tempA", "tempB", "cosine", "exactEquals", "Vec3", "x", "y", "z", "v", "set", "copy", "va", "vb", "add", "subtract", "multiply", "scale", "divide", "inverse", "length", "distance", "squaredLength", "squaredDistance", "negate", "cross", "normalize", "dot", "exactEquals", "mat3", "transformMat3", "mat4", "transformMat4", "scaleRotateMat4", "q", "transformQuat", "angle", "t", "lerp", "a", "o", "tempVec3", "Vec3", "ID", "ATTR_ID", "isBoundsWarned", "Geometry", "gl", "attributes", "key", "attr", "isNewBuffer", "value", "start", "count", "program", "location", "name", "type", "numLoc", "size", "stride", "offset", "i", "mode", "indexBytesPerElement", "array", "min", "max", "center", "scale", "x", "y", "z", "maxRadiusSq", "l", "ID", "arrayCacheF32", "Program", "gl", "vertex", "fragment", "uniforms", "transparent", "cullFace", "frontFace", "depthTest", "depthWrite", "depthFunc", "vertexShader", "addLineNumbers", "fragmentShader", "numUniforms", "uIndex", "uniform", "split", "locations", "numAttribs", "aIndex", "attribute", "location", "src", "dst", "srcAlpha", "dstAlpha", "modeRGB", "modeAlpha", "flipFaces", "textureUnit", "activeUniform", "component", "warn", "setUniform", "textureUnits", "value", "type", "flatten", "setValue", "arraysEqual", "setArray", "string", "lines", "i", "a", "arrayLen", "valueLen", "length", "b", "l", "warnCount", "message", "tempVec3", "Vec3", "ID", "Renderer", "canvas", "width", "height", "dpr", "alpha", "depth", "stencil", "antialias", "premultipliedAlpha", "preserveDrawingBuffer", "powerPreference", "autoClear", "webgl", "attributes", "x", "y", "id", "src", "dst", "srcAlpha", "dstAlpha", "modeRGB", "modeAlpha", "value", "target", "buffer", "extension", "webgl2Func", "extFunc", "a", "b", "scene", "camera", "frustumCull", "sort", "renderList", "node", "opaque", "transparent", "ui", "update", "clear", "copy", "out", "a", "set", "x", "y", "z", "w", "scale", "out", "a", "b", "normalize", "out", "a", "x", "y", "z", "w", "len", "dot", "b", "identity", "out", "setAxisAngle", "axis", "rad", "multiply", "a", "b", "ax", "ay", "az", "aw", "bx", "by", "bz", "bw", "rotateX", "rotateY", "rotateZ", "slerp", "t", "omega", "cosom", "sinom", "scale0", "scale1", "invert", "a0", "a1", "a2", "a3", "dot", "invDot", "conjugate", "fromMat3", "m", "fTrace", "fRoot", "i", "j", "k", "fromEuler", "euler", "order", "sx", "cx", "sy", "cy", "sz", "cz", "copy", "set", "dot", "normalize", "Quat", "x", "y", "z", "w", "v", "identity", "set", "a", "rotateX", "rotateY", "rotateZ", "q", "invert", "conjugate", "copy", "normalize", "qA", "qB", "multiply", "dot", "matrix3", "fromMat3", "euler", "fromEuler", "axis", "setAxisAngle", "t", "slerp", "o", "copy", "out", "a", "set", "m00", "m01", "m02", "m03", "m10", "m11", "m12", "m13", "m20", "m21", "m22", "m23", "m30", "m31", "m32", "m33", "identity", "invert", "out", "a", "a00", "a01", "a02", "a03", "a10", "a11", "a12", "a13", "a20", "a21", "a22", "a23", "a30", "a31", "a32", "a33", "b00", "b01", "b02", "b03", "b04", "b05", "b06", "b07", "b08", "b09", "b10", "b11", "det", "determinant", "multiply", "b", "b0", "b1", "b2", "b3", "translate", "v", "x", "y", "z", "scale", "rotate", "rad", "axis", "len", "s", "c", "t", "b12", "b20", "b21", "b22", "getTranslation", "mat", "getScaling", "m11", "m12", "m13", "m21", "m22", "m23", "m31", "m32", "m33", "getMaxScaleOnAxis", "getRotation", "temp", "scaling", "is1", "is2", "is3", "sm11", "sm12", "sm13", "sm21", "sm22", "sm23", "sm31", "sm32", "sm33", "trace", "S", "fromRotationTranslationScale", "q", "w", "x2", "y2", "z2", "xx", "xy", "xz", "yy", "yz", "zz", "wx", "wy", "wz", "sx", "sy", "sz", "fromQuat", "yx", "zx", "zy", "perspective", "fovy", "aspect", "near", "far", "f", "nf", "ortho", "left", "right", "bottom", "top", "lr", "bt", "targetTo", "eye", "target", "up", "eyex", "eyey", "eyez", "upx", "upy", "upz", "z0", "z1", "x0", "x1", "add", "subtract", "multiplyScalar", "Mat4", "m00", "m01", "m02", "m03", "m10", "m11", "m12", "m13", "m20", "m21", "m22", "m23", "m30", "m31", "m32", "m33", "v", "set", "m", "translate", "axis", "rotate", "scale", "ma", "mb", "add", "subtract", "multiply", "multiplyScalar", "identity", "copy", "fov", "aspect", "near", "far", "perspective", "left", "right", "bottom", "top", "ortho", "q", "fromQuat", "invert", "pos", "fromRotationTranslationScale", "getRotation", "getTranslation", "getScaling", "getMaxScaleOnAxis", "eye", "target", "up", "targetTo", "determinant", "a", "o", "fromRotationMatrix", "out", "m", "order", "tmpMat4", "Mat4", "Euler", "x", "y", "z", "order", "v", "m", "fromRotationMatrix", "q", "a", "o", "Transform", "Mat4", "Vec3", "Quat", "Euler", "parent", "notifyParent", "child", "notifyChild", "force", "i", "l", "callback", "target", "invert", "tempMat4", "Mat4", "tempVec3a", "Vec3", "tempVec3b", "Camera", "Transform", "gl", "near", "far", "fov", "aspect", "left", "right", "bottom", "top", "zoom", "target", "v", "m", "i", "invLen", "node", "worldMatrix", "center", "radius", "normal", "plane", "fromMat4", "out", "a", "fromQuat", "q", "x", "y", "z", "w", "x2", "y2", "z2", "xx", "yx", "yy", "zx", "zy", "zz", "wx", "wy", "wz", "copy", "set", "m00", "m01", "m02", "m10", "m11", "m12", "m20", "m21", "m22", "identity", "invert", "out", "a", "a00", "a01", "a02", "a10", "a11", "a12", "a20", "a21", "a22", "b01", "b11", "b21", "det", "multiply", "out", "a", "b", "a00", "a01", "a02", "a10", "a11", "a12", "a20", "a21", "a22", "b00", "b01", "b02", "b10", "b11", "b12", "b20", "b21", "b22", "translate", "v", "x", "y", "rotate", "rad", "s", "c", "scale", "normalFromMat4", "a03", "a13", "a23", "a30", "a31", "a32", "a33", "b03", "b04", "b05", "b06", "b07", "b08", "b09", "det", "Mat3", "m00", "m01", "m02", "m10", "m11", "m12", "m20", "m21", "m22", "set", "v", "m", "translate", "rotate", "scale", "ma", "mb", "multiply", "identity", "copy", "fromMat4", "q", "fromQuat", "vec3a", "vec3b", "vec3c", "invert", "normalFromMat4", "ID", "Mesh", "Transform", "gl", "geometry", "program", "mode", "frustumCulled", "renderOrder", "Mat4", "Mat3", "f", "camera", "flipFaces", "emptyPixel", "isPowerOf2", "value", "ID", "Texture", "gl", "image", "target", "type", "format", "internalFormat", "wrapS", "wrapT", "generateMipmaps", "minFilter", "magFilter", "premultiplyAlpha", "unpackAlignment", "flipY", "anisotropy", "level", "width", "height", "textureUnit", "needsUpdate", "i", "copy", "out", "a", "set", "x", "y", "add", "b", "subtract", "multiply", "divide", "scale", "distance", "squaredDistance", "length", "squaredLength", "negate", "inverse", "normalize", "len", "dot", "cross", "lerp", "t", "ax", "ay", "transformMat3", "out", "a", "m", "x", "y", "transformMat4", "exactEquals", "b", "Vec2", "x", "y", "v", "set", "copy", "va", "vb", "add", "subtract", "multiply", "scale", "divide", "inverse", "length", "distance", "squaredDistance", "squaredLength", "negate", "cross", "normalize", "dot", "exactEquals", "mat3", "transformMat3", "mat4", "transformMat4", "a", "lerp", "o", "Vec4", "x", "y", "z", "w", "v", "set", "copy", "normalize", "scale", "dot", "a", "o", "Plane", "Geometry", "gl", "width", "height", "widthSegments", "heightSegments", "attributes", "wSegs", "hSegs", "num", "numIndices", "position", "normal", "uv", "index", "depth", "u", "v", "w", "uDir", "vDir", "i", "ii", "io", "segW", "segH", "iy", "y", "ix", "x", "a", "b", "c", "d", "Box", "Geometry", "gl", "width", "height", "depth", "widthSegments", "heightSegments", "depthSegments", "attributes", "wSegs", "hSegs", "dSegs", "num", "numIndices", "position", "normal", "uv", "index", "i", "ii", "Plane", "STATE", "tempVec3", "Vec3", "tempVec2a", "Vec2", "tempVec2b", "Orbit", "object", "element", "enabled", "target", "ease", "inertia", "enableRotate", "rotateSpeed", "autoRotate", "autoRotateSpeed", "enableZoom", "zoomSpeed", "zoomStyle", "enablePan", "panSpeed", "minPolarAngle", "maxPolarAngle", "minAzimuthAngle", "maxAzimuthAngle", "minDistance", "maxDistance", "sphericalDelta", "sphericalTarget", "spherical", "panDelta", "offset", "handleAutoRotate", "sinPhiRadius", "rotateStart", "panStart", "dollyStart", "state", "getZoomScale", "panLeft", "distance", "m", "panUp", "pan", "deltaX", "deltaY", "el", "targetDistance", "dolly", "dollyScale", "angle", "handleMoveRotate", "x", "y", "handleMouseMoveDolly", "e", "handleMovePan", "handleTouchStartDollyPan", "dx", "dy", "handleTouchMoveDollyPan", "onMouseDown", "onMouseMove", "onMouseUp", "onMouseWheel", "onTouchStart", "onTouchMove", "onTouchEnd", "onContextMenu", "addHandlers", "tempVec2a", "Vec2", "tempVec2b", "tempVec2c", "tempVec3a", "Vec3", "tempVec3b", "tempVec3c", "tempVec3d", "tempVec3e", "tempVec3f", "tempVec3g", "tempVec3h", "tempVec3i", "tempVec3j", "tempVec3k", "tempMat4", "Mat4", "Raycast", "camera", "mouse", "left", "right", "bottom", "top", "zoom", "x", "y", "meshes", "maxDistance", "output", "invWorldMat4", "origin", "direction", "hits", "mesh", "bounds", "localMaxDistance", "localDistance", "a", "b", "cullFace", "includeUV", "includeNormal", "c", "closestFaceNormal", "faceNormal", "barycoord", "uvA", "uvB", "uvC", "i", "closestA", "closestB", "closestC", "geometry", "attributes", "index", "position", "start", "end", "stride", "j", "ai", "bi", "ci", "distance", "plane", "xminp", "delta", "sphere", "ray", "tca", "d2", "radius2", "thc", "t0", "t1", "box", "tmin", "tmax", "tYmin", "tYmax", "tZmin", "tZmax", "invdirx", "invdiry", "invdirz", "min", "max", "backfaceCulling", "normal", "edge1", "edge2", "diff", "DdN", "sign", "DdQxE2", "DdE1xQ", "QdN", "point", "target", "v0", "v1", "v2", "dot00", "dot01", "dot02", "dot11", "dot12", "denom", "invDenom", "u", "v", "vertex", "fragment", "NormalProgram", "gl", "Program", "tmpVec3A", "Vec3", "tmpVec3B", "tmpVec3C", "tmpVec3D", "tmpQuatA", "Quat", "tmpQuatB", "tmpQuatC", "tmpQuatD", "GLTFAnimation", "data", "weight", "a", "times", "totalWeight", "isSet", "elapsed", "node", "transform", "interpolation", "values", "val", "size", "prevIndex", "t", "nextIndex", "alpha", "prevVal", "prevTan", "nextTan", "nextVal", "t2", "t3", "s2", "s3", "s0", "s1", "i", "tempMat4", "Mat4", "identity", "GLTFSkin", "Mesh", "gl", "skeleton", "geometry", "program", "mode", "size", "Texture", "bone", "i", "camera", "_worldMatrix", "InstancedMesh", "Mesh", "args", "matrixData", "i", "j", "transform", "Transform", "lightmapData", "Vec4", "camera", "TYPE_ARRAY", "TYPE_SIZE", "ATTRIBUTES", "TRANSFORMS", "GLTFLoader", "manager", "gl", "src", "dir", "desc", "buffers", "bufferViews", "images", "textures", "materials", "skins", "meshes", "nodes", "animations", "scenes", "scene", "lights", "i", "res", "glb", "header", "jsonChunkHeader", "jsonByteOffset", "jsonByteLength", "jsonText", "json", "binaryChunkHeader", "binaryByteOffset", "binaryByteLength", "binary", "uri", "buffer", "o", "primitives", "attributes", "indices", "attr", "componentType", "mimeType", "bufferIndex", "byteOffset", "byteLength", "byteStride", "target", "name", "extensions", "extras", "isAttribute", "bufferViewIndex", "data", "image", "blob", "textureInfo", "samplerIndex", "sourceIndex", "options", "sampler", "prop", "texture", "Texture", "pbrMetallicRoughness", "normalTexture", "occlusionTexture", "emissiveTexture", "emissiveFactor", "alphaMode", "alphaCutoff", "doubleSided", "baseColorFactor", "baseColorTexture", "metallicFactor", "roughnessFactor", "metallicRoughnessTexture", "inverseBindMatrices", "skeleton", "joints", "weights", "meshIndex", "numInstances", "skinIndices", "isLightmap", "mesh", "skin", "skinIndex", "geometry", "program", "mode", "GLTFSkin", "meshConstructor", "InstancedMesh", "Mesh", "materialIndex", "targets", "NormalProgram", "Geometry", "index", "normalized", "count", "type", "min", "max", "sparse", "bufferByteOffset", "size", "TypeArray", "elementBytes", "componentStride", "isInterleaved", "filteredData", "typedData", "start", "end", "camera", "children", "matrix", "rotation", "scale", "translation", "node", "Transform", "isInstanced", "isFirstInstance", "isInstancedMatrix", "childIndex", "primitive", "joint", "Mat4", "channels", "samplers", "animationIndex", "inputIndex", "interpolation", "outputIndex", "nodeIndex", "path", "transform", "times", "values", "GLTFAnimation", "nodesIndices", "map", "lightsDescArray", "lightIndex", "lightDesc", "light", "Vec3", "GridHelper", "Mesh", "gl", "size", "divisions", "color", "Vec3", "meshProps", "numVertices", "vertices", "hs", "i", "o", "geometry", "Geometry", "program", "Program", "vertex", "fragment", "SkyBox", "Mesh", "gl", "imgArray", "texture", "Texture", "geometry", "Box", "program", "Program", "force", "MessageBus", "type", "func", "index", "data", "makeButtonInList", "buttonLabel", "listId", "callback", "li", "button", "STATE", "PLANE", "Vec3", "EditMode", "msgBus", "raycast", "scene", "camera", "renderer", "terrain", "Vec2", "cell", "GridHelper", "assets", "assetId", "makeButtonInList", "event", "Mesh", "e", "hits", "intersection", "objIndex", "GRID_X", "GRID_Y", "GRID_OFFSET_X", "GRID_OFFSET_Y", "calcOffset", "x", "y", "calcGridToWorld", "z", "withinBounds", "NEIGHBORS", "Terrain", "scene", "renderer", "msgBus", "raycast", "assets", "Program", "Transform", "min", "max", "direction", "cell", "wall", "neighbor", "newWall", "Mesh", "RaycastHelper", "renderer", "Raycast", "list", "type", "e", "camera", "object", "objIndex", "plane", "objList", "options", "cellList", "hits", "cell", "a", "b", "init", "canvasElem", "renderer", "Renderer", "gl", "camera", "Camera", "resize", "controls", "Orbit", "assets", "scene", "Transform", "raycast", "RaycastHelper", "loadAssets", "msgBus", "MessageBus", "view", "Vec3", "program", "Program", "context", "terrain", "Terrain", "editMode", "EditMode", "gltf", "GLTFLoader", "root", "node", "material", "SkyBox", "update"]
}
